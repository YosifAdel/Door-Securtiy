/******************************************************************************
 * Module: UART
 * File Name: uart.c
 * Description: Source file for the UART AVR driver
 * Author: Yousif Adel
 *******************************************************************************/
#include "uart.h"
#include "common_macros.h" /* To use the macros like SET_BIT */

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*
 * Description :
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
//void UART_init(uint32 baud_rate)
void UART_init(const UART_ConfigType * Config_Ptr)
{
	uint16 ubrr_value = 0;

	/************************** UCSRA Description ***************************/
	/* U2X = 1 for double transmission speed */
	UART_UCSRA_REG.Bits.U2X_Bit = 1;

	/************************** UCSRB Description ***************************/
	/* enable transmitter and receiver bits*/
	UART_UCSRB_REG.Bits.RXEN_Bit = 1;
	UART_UCSRB_REG.Bits.TXEN_Bit = 1;

	/* insert the required data bits in the second 2 bits (UCSZ1 , UCSZ0)of UCSRC Register */
	UART_UCSRB_REG.Bits.UCSZ2_Bit = ( ((Config_Ptr->bit_data) & 0x04) >> 2);
			/* other way */
	//UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->bit_data) & 0x04));		// 0xFB	[1111 1011]


	/************************** UCSRC Description ***************************/

	/* The URSEL must be one when writing the UCSRC */
	UART_UCSRC_REG.Bits.URSEL_Bit = 1;

	/* insert the required data bits in the second 2 bits (UCSZ1 , UCSZ0)of UCSRC Register */
	UART_UCSRC_REG.Bits.USCZ0_Bit = ( ((Config_Ptr->bit_data) & 0x01));
	UART_UCSRC_REG.Bits.USCZ1_Bit = ( ((Config_Ptr->bit_data) & 0x02)>>1);
		/* other way */
	//UCSRC |= (UCSRC & 0xF9) | (( ( (Config_Ptr->bit_data)<< 1) & 0x06));		// 0xF9	[1111 0110]

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UART_UBRRH_REG.Byte = ubrr_value>>8;
	UART_UBRRL_REG.Byte = ubrr_value;
}

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UART_UCSRA_REG.Byte,UART_UCSRA_REG.Bits.UDRE_Bit)){}

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UART_UDR_REG.Byte = data;

	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte()
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UART_UCSRA_REG.Byte,UART_UCSRA_REG.Bits.RXC_Bit)){}

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UART_UDR_REG;
}

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{

	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
	}
	/************************* Another Method *************************
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;


	do
	{
		/* Receive the first byte */
		Str[i] = UART_receiveByte();
		i++;

		/* Receive the whole string until the '#' */
	}while(Str[i] != '#');

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
