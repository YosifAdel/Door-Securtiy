 /******************************************************************************
 * Module: TIMER 1
 * File Name: timer1.h
 * Description: Header file for the AVR TIMER 1 driver
 * Author: Yousif Adel
 *******************************************************************************/

#ifndef TIMER1_H_
#define TIMER1_H_

#include	"std_types.h"

/***************** Timer 1 Registers type structure declarations *******************/

typedef union
{
	uint8 Byte;
	struct
	{
		uint8 WGM10_Bit: 1;
		uint8 WGM11_Bit: 1;
		uint8 FOC1B_Bit: 1;
		uint8 FOC1A_Bit: 1;
		uint8 COM1B0_Bit: 1;
		uint8 COM1B1_Bit: 1;
		uint8 COM1A0_Bit: 1;
		uint8 COM1A1_Bit: 1;
	}Bits;
}TIMER1_TCCR1A_Type;

typedef union
{
	uint8 Byte;
	struct
	{
		uint8 CS10_Bit:1;
		uint8 CS11_Bit:1;
		uint8 CS12_Bit:1;
		uint8 WGM12_Bit:1;
		uint8 WGM13_Bit:1;
		uint8 :1;
		uint8 ICES1_Bit:1;
		uint8 ICNC1_Bit:1;
	}Bits;
}TIMER1_TCCR1B_Type;

typedef union
{
	uint8 Byte;
}TIMER1_TCNT1L_Type;

typedef union
{
	uint8 Byte;
}TIMER1_TCNT1H_Type;

typedef union
{
	uint8 Byte;
}TIMER1_OCR1AL_Type;

typedef union
{
	uint8 Byte;
}TIMER1_OCR1AH_Type;


typedef union
{
	uint8 Byte;
}TIMER1_OCR1BL_Type;

typedef union
{
	uint8 Byte;
}TIMER1_OCRBH_Type;

typedef union
{
	uint8 Byte;
}TIMER1_ICR1L_Type;

typedef union
{
	uint8 Byte;
}TIMER1_ICR1H_Type;



typedef union
{
	uint8 Byte;
	struct
	{
		uint8 TOIE0_Bit:1;
		uint8 OCIE0_Bit:1;
		uint8 TOIE1_Bit:1;
		uint8 OCIE1B_Bit:1;
		uint8 OCIE1A_Bit:1;
		uint8 TICIE1_Bit:1;
		uint8 TOIE2_Bit:1;
		uint8 OCIE2_Bit:1;
	}Bits;
}TIMER1_TIMSK_Type;

typedef union
{
	uint8 Byte;
	struct
	{
		uint8 TOV0_Bit:1;
		uint8 OCF0_Bit:1;
		uint8 TOV1_Bit:1;
		uint8 OCF1B_Bit:1;
		uint8 OCF1A_Bit:1;
		uint8 ICF1_Bit:1;
		uint8 TOV2_Bit:1;
		uint8 OCF2_Bit:1;
	}Bits;
}TIMER1_TIFR_Type;


/******************************************************************************/
typedef union {
	uint8 Byte;
	struct{
		uint8 C_Bit:1;
		uint8 Z_Bit:1;
		uint8 N_Bit:1;
		uint8 V_Bit:1;
		uint8 S_Bit:1;
		uint8 H_Bit:1;
		uint8 T_Bit:1;
		uint8 I_Bit:1;
	}Bits;
}SREG_Type;
/******************************************************************************/

/**************************** UART Registers Definitions ***********************/
#define TIMER1_TCCR1A_REG			(*(volatile TIMER1_TCCR1A_Type*)0x4F)
#define TIMER1_TCCR1B_REG			(*(volatile TIMER1_TCCR1B_Type*)(0x4E))

#define TIMER1_TCNT1L_REG			(*(volatile TIMER1_TCNT1L_Type*)0x4C)
#define TIMER1_TCNT1H_REG			(*(volatile TIMER1_TCNT1H_Type*)0x2D)


#define TIMER1_OCR1AL_REG			(*(volatile TIMER1_OCR1AL_Type*)0x4A)
#define TIMER1_OCR1AH_REG			(*(volatile TIMER1_OCR1AH_Type*)(0x4B))


#define TIMER1_OCR1BL_REG			(*(volatile TIMER1_OCR1BL_Type*)0x48)
#define TIMER1_OCR1BH_REG			(*(volatile TIMER1_OCR1BH_Type*)(0x49))


#define TIMER1_ICR1L_REG			(*(volatile TIMER1_ICR1L_Type*)0x46)
#define TIMER1_ICR1H_REG			(*(volatile TIMER1_ICR1H_Type*)(0x47))

#define TIMER1_TIMSK_REG			(*(volatile TIMER1_TIMSK_Type*)(0x59))

#define TIMER1_TIFR_REG				(*(volatile TIMER1_TIFR_Type*)(0x58))
/*******************************************************************************/
#define S_REG      			(*(volatile SREG_Type*)0x5F)
/*******************************************************************************/

/*******************************************************************************
 *                         Types Declaration                                   *
 *******************************************************************************/

typedef enum
{

}Timer1_Mode;

typedef enum
{
	NO_CLOCK, F_CPU_CLOCK, F_CPU_8, F_CPU_64, F_CPU_256, F_CPU_1024,
	EXTERNAL_CLOCK_FALLING,
	EXTERNAL_CLOCK_RISING
}Timer1_Prescaler;

typedef struct {
	uint16 initial_value;
	uint16 compare_value; // it will be used in compare mode only.
	Timer1_Prescaler prescaler;
	Timer1_Mode mode;
} Timer1_ConfigType;


/*******************************************************************************
 *                      Functions Prototypes                                   *
 *******************************************************************************/


/*
● Description:
  	  ⮚ Function to initialize the Timer driver
● Inputs: pointer to the configuration structure with type Timer1_ConfigType.
● Return: None
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)




/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data);


/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void);

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str);

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str); // Receive until #

#endif /* UART_H_ */

