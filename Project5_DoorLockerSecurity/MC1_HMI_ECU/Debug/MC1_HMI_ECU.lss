
MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f8  00800060  000037ca  0000385e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800158  00800158  00003956  2**0
                  ALLOC
  3 .stab         0000342c  00000000  00000000  00003958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002213  00000000  00000000  00006d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000090d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ae90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cb28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cf15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 35       	cpi	r26, 0x5C	; 92
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 */
void savePassword(uint8 *arr_pass , uint8 arr_size, uint8 key_num);

/*******************************************************************************************************/
int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Enable I-bit = 1*/
	S_REG.Bits.I_Bit = 1;
     b4e:	ef e5       	ldi	r30, 0x5F	; 95
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	80 83       	st	Z, r24

	/* initialize LCD driver*/
	LCD_init();
     b58:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_init>

	/*initiate UART driver*/
	UART_init(&UART_Configurations);
     b5c:	88 e4       	ldi	r24, 0x48	; 72
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_init>

	/*send byte to MC2 to tell him that MC1 is ready*/
	UART_sendByte(MC1_READY);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>

	/* initialize LCD driver*/
	Timer1_init(&Timer1_Configuration);
     b6a:	81 e5       	ldi	r24, 0x51	; 81
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <Timer1_init>
	/* set the call back to pointer in the Timer 1 */
	Timer1_setCallBack(Timer_callBack);
     b72:	86 ec       	ldi	r24, 0xC6	; 198
     b74:	9e e0       	ldi	r25, 0x0E	; 14
     b76:	0e 94 a4 19 	call	0x3348	; 0x3348 <Timer1_setCallBack>


	createAndCheckPassword();
     b7a:	0e 94 c2 05 	call	0xb84	; 0xb84 <createAndCheckPassword>

	while(1)
	{
		mainOptions();
     b7e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <mainOptions>
     b82:	fd cf       	rjmp	.-6      	; 0xb7e <main+0x38>

00000b84 <createAndCheckPassword>:
/*
 * Description:
	Function to allow you to insert password twice and check if the two password are matched or not*
 */
void createAndCheckPassword(void)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	e7 97       	sbiw	r28, 0x37	; 55
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61

	/*array to get the confirmation password */
	uint8 arr_confirm_pass[PASSWORD_SIZE];

	/* variable to count from 0 to password size*/
	uint8 passCounter = 0;
     b98:	1c a6       	std	Y+44, r1	; 0x2c

	/* variable to check the state of the password whether right or wrong */
	uint8 password_checking_state = RIGHT_PASSWORD;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	8b a7       	std	Y+43, r24	; 0x2b

	/* Clear LCD & display Enter Pass*/
	LCD_clearScreen();
     b9e:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
     baa:	80 e6       	ldi	r24, 0x60	; 96
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
	LCD_moveCursor(1,0);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>

	/* save the entered Password*/
	savePassword(arr_pass,PASSWORD_SIZE,key);
     bba:	ce 01       	movw	r24, r28
     bbc:	8e 96       	adiw	r24, 0x2e	; 46
     bbe:	65 e0       	ldi	r22, 0x05	; 5
     bc0:	4d a5       	ldd	r20, Y+45	; 0x2d
     bc2:	0e 94 b8 07 	call	0xf70	; 0xf70 <savePassword>


	/* Clear LCD & display re-enter Pass*/
	LCD_clearScreen();
     bc6:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("plz re-enter");
     bd2:	81 e7       	ldi	r24, 0x71	; 113
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
	LCD_moveCursor(1,0);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("pass:");
     be2:	8e e7       	ldi	r24, 0x7E	; 126
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>

	/*
		- Enter password of PASSWORD_SIZE characters using keypad
	  	- save the re-entered password , confirmation
	*/
	savePassword(arr_confirm_pass,PASSWORD_SIZE,key);
     bea:	ce 01       	movw	r24, r28
     bec:	c3 96       	adiw	r24, 0x33	; 51
     bee:	65 e0       	ldi	r22, 0x05	; 5
     bf0:	4d a5       	ldd	r20, Y+45	; 0x2d
     bf2:	0e 94 b8 07 	call	0xf70	; 0xf70 <savePassword>
     bf6:	19 c0       	rjmp	.+50     	; 0xc2a <createAndCheckPassword+0xa6>
			3. size: to know the size of the password [size of the array]
			4. state: check whether both matched or not
	 */
	while(passCounter < PASSWORD_SIZE)
	{
		if(arr_pass[passCounter] != arr_confirm_pass[passCounter])
     bf8:	8c a5       	ldd	r24, Y+44	; 0x2c
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	ce 01       	movw	r24, r28
     c00:	8e 96       	adiw	r24, 0x2e	; 46
     c02:	fc 01       	movw	r30, r24
     c04:	e2 0f       	add	r30, r18
     c06:	f3 1f       	adc	r31, r19
     c08:	40 81       	ld	r20, Z
     c0a:	8c a5       	ldd	r24, Y+44	; 0x2c
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	ce 01       	movw	r24, r28
     c12:	c3 96       	adiw	r24, 0x33	; 51
     c14:	fc 01       	movw	r30, r24
     c16:	e2 0f       	add	r30, r18
     c18:	f3 1f       	adc	r31, r19
     c1a:	80 81       	ld	r24, Z
     c1c:	48 17       	cp	r20, r24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <createAndCheckPassword+0xa0>
		{
			/* if any character is different then both are not identical then it is not matched*/
			password_checking_state = WRONG_PASSWORD;
     c20:	1b a6       	std	Y+43, r1	; 0x2b
     c22:	06 c0       	rjmp	.+12     	; 0xc30 <createAndCheckPassword+0xac>
			break;
		}
		passCounter++;
     c24:	8c a5       	ldd	r24, Y+44	; 0x2c
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	8c a7       	std	Y+44, r24	; 0x2c
			1. array contains the values of first password
			2. array contains the values of second password
			3. size: to know the size of the password [size of the array]
			4. state: check whether both matched or not
	 */
	while(passCounter < PASSWORD_SIZE)
     c2a:	8c a5       	ldd	r24, Y+44	; 0x2c
     c2c:	85 30       	cpi	r24, 0x05	; 5
     c2e:	20 f3       	brcs	.-56     	; 0xbf8 <createAndCheckPassword+0x74>
			break;
		}
		passCounter++;
	}

	if(password_checking_state == RIGHT_PASSWORD)
     c30:	8b a5       	ldd	r24, Y+43	; 0x2b
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	09 f0       	breq	.+2      	; 0xc38 <createAndCheckPassword+0xb4>
     c36:	0d c1       	rjmp	.+538    	; 0xe52 <createAndCheckPassword+0x2ce>
	{
		/* since the password is identical in both array we need to save it in the EEPROM*/
		UART_sendByte(SAVE_PASSWORD);
     c38:	84 e0       	ldi	r24, 0x04	; 4
     c3a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a0 e2       	ldi	r26, 0x20	; 32
     c44:	b1 e4       	ldi	r27, 0x41	; 65
     c46:	8f a3       	std	Y+39, r24	; 0x27
     c48:	98 a7       	std	Y+40, r25	; 0x28
     c4a:	a9 a7       	std	Y+41, r26	; 0x29
     c4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	6f a1       	ldd	r22, Y+39	; 0x27
     c50:	78 a5       	ldd	r23, Y+40	; 0x28
     c52:	89 a5       	ldd	r24, Y+41	; 0x29
     c54:	9a a5       	ldd	r25, Y+42	; 0x2a
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	4a ef       	ldi	r20, 0xFA	; 250
     c5c:	54 e4       	ldi	r21, 0x44	; 68
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8b a3       	std	Y+35, r24	; 0x23
     c68:	9c a3       	std	Y+36, r25	; 0x24
     c6a:	ad a3       	std	Y+37, r26	; 0x25
     c6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c6e:	6b a1       	ldd	r22, Y+35	; 0x23
     c70:	7c a1       	ldd	r23, Y+36	; 0x24
     c72:	8d a1       	ldd	r24, Y+37	; 0x25
     c74:	9e a1       	ldd	r25, Y+38	; 0x26
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	2c f4       	brge	.+10     	; 0xc90 <createAndCheckPassword+0x10c>
		__ticks = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9a a3       	std	Y+34, r25	; 0x22
     c8c:	89 a3       	std	Y+33, r24	; 0x21
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <createAndCheckPassword+0x18a>
	else if (__tmp > 65535)
     c90:	6b a1       	ldd	r22, Y+35	; 0x23
     c92:	7c a1       	ldd	r23, Y+36	; 0x24
     c94:	8d a1       	ldd	r24, Y+37	; 0x25
     c96:	9e a1       	ldd	r25, Y+38	; 0x26
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	4c f5       	brge	.+82     	; 0xcfa <createAndCheckPassword+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca8:	6f a1       	ldd	r22, Y+39	; 0x27
     caa:	78 a5       	ldd	r23, Y+40	; 0x28
     cac:	89 a5       	ldd	r24, Y+41	; 0x29
     cae:	9a a5       	ldd	r25, Y+42	; 0x2a
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	9a a3       	std	Y+34, r25	; 0x22
     cce:	89 a3       	std	Y+33, r24	; 0x21
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <createAndCheckPassword+0x16c>
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	98 a3       	std	Y+32, r25	; 0x20
     cd8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cdc:	98 a1       	ldd	r25, Y+32	; 0x20
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <createAndCheckPassword+0x15a>
     ce2:	98 a3       	std	Y+32, r25	; 0x20
     ce4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	89 a1       	ldd	r24, Y+33	; 0x21
     ce8:	9a a1       	ldd	r25, Y+34	; 0x22
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9a a3       	std	Y+34, r25	; 0x22
     cee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	89 a1       	ldd	r24, Y+33	; 0x21
     cf2:	9a a1       	ldd	r25, Y+34	; 0x22
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <createAndCheckPassword+0x14e>
     cf8:	14 c0       	rjmp	.+40     	; 0xd22 <createAndCheckPassword+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfa:	6b a1       	ldd	r22, Y+35	; 0x23
     cfc:	7c a1       	ldd	r23, Y+36	; 0x24
     cfe:	8d a1       	ldd	r24, Y+37	; 0x25
     d00:	9e a1       	ldd	r25, Y+38	; 0x26
     d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9a a3       	std	Y+34, r25	; 0x22
     d0c:	89 a3       	std	Y+33, r24	; 0x21
     d0e:	89 a1       	ldd	r24, Y+33	; 0x21
     d10:	9a a1       	ldd	r25, Y+34	; 0x22
     d12:	9e 8f       	std	Y+30, r25	; 0x1e
     d14:	8d 8f       	std	Y+29, r24	; 0x1d
     d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d18:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <createAndCheckPassword+0x196>
     d1e:	9e 8f       	std	Y+30, r25	; 0x1e
     d20:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);

		/* [send the array]send the password */
		for(passCounter = 0; passCounter < PASSWORD_SIZE; passCounter++)
     d22:	1c a6       	std	Y+44, r1	; 0x2c
     d24:	12 c0       	rjmp	.+36     	; 0xd4a <createAndCheckPassword+0x1c6>
		{

			/* Waits until MC2 ready to receive the password */
			while(UART_recieveByte() != MC2_READY);
     d26:	0e 94 b6 1a 	call	0x356c	; 0x356c <UART_recieveByte>
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <createAndCheckPassword+0x1a2>
			/* send the password byte by byte*/
			UART_sendByte(arr_pass[passCounter]);
     d2e:	8c a5       	ldd	r24, Y+44	; 0x2c
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	ce 01       	movw	r24, r28
     d36:	8e 96       	adiw	r24, 0x2e	; 46
     d38:	fc 01       	movw	r30, r24
     d3a:	e2 0f       	add	r30, r18
     d3c:	f3 1f       	adc	r31, r19
     d3e:	80 81       	ld	r24, Z
     d40:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>
		/* since the password is identical in both array we need to save it in the EEPROM*/
		UART_sendByte(SAVE_PASSWORD);
		_delay_ms(10);

		/* [send the array]send the password */
		for(passCounter = 0; passCounter < PASSWORD_SIZE; passCounter++)
     d44:	8c a5       	ldd	r24, Y+44	; 0x2c
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	8c a7       	std	Y+44, r24	; 0x2c
     d4a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d4c:	85 30       	cpi	r24, 0x05	; 5
     d4e:	58 f3       	brcs	.-42     	; 0xd26 <createAndCheckPassword+0x1a2>
			/* send the password byte by byte*/
			UART_sendByte(arr_pass[passCounter]);
		}

		/* wait until MC2 save the password in the EEPROM*/
		while(UART_recieveByte()!=PASSWORD_SAVED);
     d50:	0e 94 b6 1a 	call	0x356c	; 0x356c <UART_recieveByte>
     d54:	85 30       	cpi	r24, 0x05	; 5
     d56:	e1 f7       	brne	.-8      	; 0xd50 <createAndCheckPassword+0x1cc>
		LCD_clearScreen();
     d58:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
		LCD_moveCursor(0,1);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
		LCD_displayString("Saved The Pass");
     d64:	84 e8       	ldi	r24, 0x84	; 132
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	aa e7       	ldi	r26, 0x7A	; 122
     d72:	b4 e4       	ldi	r27, 0x44	; 68
     d74:	89 8f       	std	Y+25, r24	; 0x19
     d76:	9a 8f       	std	Y+26, r25	; 0x1a
     d78:	ab 8f       	std	Y+27, r26	; 0x1b
     d7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7c:	69 8d       	ldd	r22, Y+25	; 0x19
     d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	4a ef       	ldi	r20, 0xFA	; 250
     d8a:	54 e4       	ldi	r21, 0x44	; 68
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	8d 8b       	std	Y+21, r24	; 0x15
     d96:	9e 8b       	std	Y+22, r25	; 0x16
     d98:	af 8b       	std	Y+23, r26	; 0x17
     d9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d9c:	6d 89       	ldd	r22, Y+21	; 0x15
     d9e:	7e 89       	ldd	r23, Y+22	; 0x16
     da0:	8f 89       	ldd	r24, Y+23	; 0x17
     da2:	98 8d       	ldd	r25, Y+24	; 0x18
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db0:	88 23       	and	r24, r24
     db2:	2c f4       	brge	.+10     	; 0xdbe <createAndCheckPassword+0x23a>
		__ticks = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9c 8b       	std	Y+20, r25	; 0x14
     dba:	8b 8b       	std	Y+19, r24	; 0x13
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <createAndCheckPassword+0x2b8>
	else if (__tmp > 65535)
     dbe:	6d 89       	ldd	r22, Y+21	; 0x15
     dc0:	7e 89       	ldd	r23, Y+22	; 0x16
     dc2:	8f 89       	ldd	r24, Y+23	; 0x17
     dc4:	98 8d       	ldd	r25, Y+24	; 0x18
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	4f e7       	ldi	r20, 0x7F	; 127
     dcc:	57 e4       	ldi	r21, 0x47	; 71
     dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd2:	18 16       	cp	r1, r24
     dd4:	4c f5       	brge	.+82     	; 0xe28 <createAndCheckPassword+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd6:	69 8d       	ldd	r22, Y+25	; 0x19
     dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e2       	ldi	r20, 0x20	; 32
     de4:	51 e4       	ldi	r21, 0x41	; 65
     de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	9c 8b       	std	Y+20, r25	; 0x14
     dfc:	8b 8b       	std	Y+19, r24	; 0x13
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <createAndCheckPassword+0x29a>
     e00:	88 ec       	ldi	r24, 0xC8	; 200
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9a 8b       	std	Y+18, r25	; 0x12
     e06:	89 8b       	std	Y+17, r24	; 0x11
     e08:	89 89       	ldd	r24, Y+17	; 0x11
     e0a:	9a 89       	ldd	r25, Y+18	; 0x12
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <createAndCheckPassword+0x288>
     e10:	9a 8b       	std	Y+18, r25	; 0x12
     e12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e14:	8b 89       	ldd	r24, Y+19	; 0x13
     e16:	9c 89       	ldd	r25, Y+20	; 0x14
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	9c 8b       	std	Y+20, r25	; 0x14
     e1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1e:	8b 89       	ldd	r24, Y+19	; 0x13
     e20:	9c 89       	ldd	r25, Y+20	; 0x14
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	69 f7       	brne	.-38     	; 0xe00 <createAndCheckPassword+0x27c>
     e26:	9b c0       	rjmp	.+310    	; 0xf5e <createAndCheckPassword+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e28:	6d 89       	ldd	r22, Y+21	; 0x15
     e2a:	7e 89       	ldd	r23, Y+22	; 0x16
     e2c:	8f 89       	ldd	r24, Y+23	; 0x17
     e2e:	98 8d       	ldd	r25, Y+24	; 0x18
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9c 8b       	std	Y+20, r25	; 0x14
     e3a:	8b 8b       	std	Y+19, r24	; 0x13
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	9c 89       	ldd	r25, Y+20	; 0x14
     e40:	98 8b       	std	Y+16, r25	; 0x10
     e42:	8f 87       	std	Y+15, r24	; 0x0f
     e44:	8f 85       	ldd	r24, Y+15	; 0x0f
     e46:	98 89       	ldd	r25, Y+16	; 0x10
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <createAndCheckPassword+0x2c4>
     e4c:	98 8b       	std	Y+16, r25	; 0x10
     e4e:	8f 87       	std	Y+15, r24	; 0x0f
     e50:	86 c0       	rjmp	.+268    	; 0xf5e <createAndCheckPassword+0x3da>
		_delay_ms(LCD_DISPLAY_DELAY);
	}
	else
	{
		LCD_clearScreen();
     e52:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
		LCD_moveCursor(0,1);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
		LCD_displayString("WRONG PASS");
     e5e:	83 e9       	ldi	r24, 0x93	; 147
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
		LCD_moveCursor(1,1);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
		LCD_displayString("	TRY AGAIN!!!");
     e6e:	8e e9       	ldi	r24, 0x9E	; 158
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	aa e7       	ldi	r26, 0x7A	; 122
     e7c:	b4 e4       	ldi	r27, 0x44	; 68
     e7e:	8b 87       	std	Y+11, r24	; 0x0b
     e80:	9c 87       	std	Y+12, r25	; 0x0c
     e82:	ad 87       	std	Y+13, r26	; 0x0d
     e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e86:	6b 85       	ldd	r22, Y+11	; 0x0b
     e88:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a ef       	ldi	r20, 0xFA	; 250
     e94:	54 e4       	ldi	r21, 0x44	; 68
     e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	8f 83       	std	Y+7, r24	; 0x07
     ea0:	98 87       	std	Y+8, r25	; 0x08
     ea2:	a9 87       	std	Y+9, r26	; 0x09
     ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea6:	6f 81       	ldd	r22, Y+7	; 0x07
     ea8:	78 85       	ldd	r23, Y+8	; 0x08
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eba:	88 23       	and	r24, r24
     ebc:	2c f4       	brge	.+10     	; 0xec8 <createAndCheckPassword+0x344>
		__ticks = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <createAndCheckPassword+0x3c2>
	else if (__tmp > 65535)
     ec8:	6f 81       	ldd	r22, Y+7	; 0x07
     eca:	78 85       	ldd	r23, Y+8	; 0x08
     ecc:	89 85       	ldd	r24, Y+9	; 0x09
     ece:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	4f e7       	ldi	r20, 0x7F	; 127
     ed6:	57 e4       	ldi	r21, 0x47	; 71
     ed8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     edc:	18 16       	cp	r1, r24
     ede:	4c f5       	brge	.+82     	; 0xf32 <createAndCheckPassword+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e2       	ldi	r20, 0x20	; 32
     eee:	51 e4       	ldi	r21, 0x41	; 65
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <createAndCheckPassword+0x3a4>
     f0a:	88 ec       	ldi	r24, 0xC8	; 200
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <createAndCheckPassword+0x392>
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	69 f7       	brne	.-38     	; 0xf0a <createAndCheckPassword+0x386>
     f30:	14 c0       	rjmp	.+40     	; 0xf5a <createAndCheckPassword+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f32:	6f 81       	ldd	r22, Y+7	; 0x07
     f34:	78 85       	ldd	r23, Y+8	; 0x08
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <createAndCheckPassword+0x3ce>
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LCD_DISPLAY_DELAY);
		createAndCheckPassword();
     f5a:	0e 94 c2 05 	call	0xb84	; 0xb84 <createAndCheckPassword>
	}
}
     f5e:	e7 96       	adiw	r28, 0x37	; 55
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <savePassword>:
	1. array: to store the password
	2. size: to know the size of the password [size of the array]
	3. Key: values that take from the keypad
 */
void savePassword(uint8 *arr_pass , uint8 arr_size, uint8 key_num)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	ed 97       	sbiw	r28, 0x3d	; 61
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	9b af       	std	Y+59, r25	; 0x3b
     f86:	8a af       	std	Y+58, r24	; 0x3a
     f88:	6c af       	std	Y+60, r22	; 0x3c
     f8a:	4d af       	std	Y+61, r20	; 0x3d
	/* send the 5bytes of the Password*/
	for(uint8 passCounter = 0; passCounter < PASSWORD_SIZE; passCounter++)
     f8c:	19 ae       	std	Y+57, r1	; 0x39
     f8e:	70 c1       	rjmp	.+736    	; 0x1270 <savePassword+0x300>
	{
		/* Get the pressed key number, if any switch pressed for more than 500 ms
		 * it will considered more than one press */
		key_num = KEYPAD_getPressedKey();
     f90:	0e 94 0c 12 	call	0x2418	; 0x2418 <KEYPAD_getPressedKey>
     f94:	8d af       	std	Y+61, r24	; 0x3d
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e2       	ldi	r26, 0x20	; 32
     f9c:	b1 e4       	ldi	r27, 0x41	; 65
     f9e:	8d ab       	std	Y+53, r24	; 0x35
     fa0:	9e ab       	std	Y+54, r25	; 0x36
     fa2:	af ab       	std	Y+55, r26	; 0x37
     fa4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa6:	6d a9       	ldd	r22, Y+53	; 0x35
     fa8:	7e a9       	ldd	r23, Y+54	; 0x36
     faa:	8f a9       	ldd	r24, Y+55	; 0x37
     fac:	98 ad       	ldd	r25, Y+56	; 0x38
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4a ef       	ldi	r20, 0xFA	; 250
     fb4:	54 e4       	ldi	r21, 0x44	; 68
     fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	89 ab       	std	Y+49, r24	; 0x31
     fc0:	9a ab       	std	Y+50, r25	; 0x32
     fc2:	ab ab       	std	Y+51, r26	; 0x33
     fc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fc6:	69 a9       	ldd	r22, Y+49	; 0x31
     fc8:	7a a9       	ldd	r23, Y+50	; 0x32
     fca:	8b a9       	ldd	r24, Y+51	; 0x33
     fcc:	9c a9       	ldd	r25, Y+52	; 0x34
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fda:	88 23       	and	r24, r24
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <savePassword+0x78>
		__ticks = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	98 ab       	std	Y+48, r25	; 0x30
     fe4:	8f a7       	std	Y+47, r24	; 0x2f
     fe6:	3f c0       	rjmp	.+126    	; 0x1066 <savePassword+0xf6>
	else if (__tmp > 65535)
     fe8:	69 a9       	ldd	r22, Y+49	; 0x31
     fea:	7a a9       	ldd	r23, Y+50	; 0x32
     fec:	8b a9       	ldd	r24, Y+51	; 0x33
     fee:	9c a9       	ldd	r25, Y+52	; 0x34
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	3f ef       	ldi	r19, 0xFF	; 255
     ff4:	4f e7       	ldi	r20, 0x7F	; 127
     ff6:	57 e4       	ldi	r21, 0x47	; 71
     ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	4c f5       	brge	.+82     	; 0x1052 <savePassword+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	6d a9       	ldd	r22, Y+53	; 0x35
    1002:	7e a9       	ldd	r23, Y+54	; 0x36
    1004:	8f a9       	ldd	r24, Y+55	; 0x37
    1006:	98 ad       	ldd	r25, Y+56	; 0x38
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	98 ab       	std	Y+48, r25	; 0x30
    1026:	8f a7       	std	Y+47, r24	; 0x2f
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <savePassword+0xd8>
    102a:	88 ec       	ldi	r24, 0xC8	; 200
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e a7       	std	Y+46, r25	; 0x2e
    1030:	8d a7       	std	Y+45, r24	; 0x2d
    1032:	8d a5       	ldd	r24, Y+45	; 0x2d
    1034:	9e a5       	ldd	r25, Y+46	; 0x2e
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <savePassword+0xc6>
    103a:	9e a7       	std	Y+46, r25	; 0x2e
    103c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1040:	98 a9       	ldd	r25, Y+48	; 0x30
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	98 ab       	std	Y+48, r25	; 0x30
    1046:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	8f a5       	ldd	r24, Y+47	; 0x2f
    104a:	98 a9       	ldd	r25, Y+48	; 0x30
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	69 f7       	brne	.-38     	; 0x102a <savePassword+0xba>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <savePassword+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1052:	69 a9       	ldd	r22, Y+49	; 0x31
    1054:	7a a9       	ldd	r23, Y+50	; 0x32
    1056:	8b a9       	ldd	r24, Y+51	; 0x33
    1058:	9c a9       	ldd	r25, Y+52	; 0x34
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	98 ab       	std	Y+48, r25	; 0x30
    1064:	8f a7       	std	Y+47, r24	; 0x2f
    1066:	8f a5       	ldd	r24, Y+47	; 0x2f
    1068:	98 a9       	ldd	r25, Y+48	; 0x30
    106a:	9c a7       	std	Y+44, r25	; 0x2c
    106c:	8b a7       	std	Y+43, r24	; 0x2b
    106e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1070:	9c a5       	ldd	r25, Y+44	; 0x2c
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <savePassword+0x102>
    1076:	9c a7       	std	Y+44, r25	; 0x2c
    1078:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		/* if the user enter any character except from 0 to 9 don't accept it*/
		do
		{
			key_num = KEYPAD_getPressedKey();
    107a:	0e 94 0c 12 	call	0x2418	; 0x2418 <KEYPAD_getPressedKey>
    107e:	8d af       	std	Y+61, r24	; 0x3d
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	a0 e2       	ldi	r26, 0x20	; 32
    1086:	b1 e4       	ldi	r27, 0x41	; 65
    1088:	8f a3       	std	Y+39, r24	; 0x27
    108a:	98 a7       	std	Y+40, r25	; 0x28
    108c:	a9 a7       	std	Y+41, r26	; 0x29
    108e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1090:	6f a1       	ldd	r22, Y+39	; 0x27
    1092:	78 a5       	ldd	r23, Y+40	; 0x28
    1094:	89 a5       	ldd	r24, Y+41	; 0x29
    1096:	9a a5       	ldd	r25, Y+42	; 0x2a
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	4a ef       	ldi	r20, 0xFA	; 250
    109e:	54 e4       	ldi	r21, 0x44	; 68
    10a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	8b a3       	std	Y+35, r24	; 0x23
    10aa:	9c a3       	std	Y+36, r25	; 0x24
    10ac:	ad a3       	std	Y+37, r26	; 0x25
    10ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10b0:	6b a1       	ldd	r22, Y+35	; 0x23
    10b2:	7c a1       	ldd	r23, Y+36	; 0x24
    10b4:	8d a1       	ldd	r24, Y+37	; 0x25
    10b6:	9e a1       	ldd	r25, Y+38	; 0x26
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e8       	ldi	r20, 0x80	; 128
    10be:	5f e3       	ldi	r21, 0x3F	; 63
    10c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c4:	88 23       	and	r24, r24
    10c6:	2c f4       	brge	.+10     	; 0x10d2 <savePassword+0x162>
		__ticks = 1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9a a3       	std	Y+34, r25	; 0x22
    10ce:	89 a3       	std	Y+33, r24	; 0x21
    10d0:	3f c0       	rjmp	.+126    	; 0x1150 <savePassword+0x1e0>
	else if (__tmp > 65535)
    10d2:	6b a1       	ldd	r22, Y+35	; 0x23
    10d4:	7c a1       	ldd	r23, Y+36	; 0x24
    10d6:	8d a1       	ldd	r24, Y+37	; 0x25
    10d8:	9e a1       	ldd	r25, Y+38	; 0x26
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	3f ef       	ldi	r19, 0xFF	; 255
    10de:	4f e7       	ldi	r20, 0x7F	; 127
    10e0:	57 e4       	ldi	r21, 0x47	; 71
    10e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	4c f5       	brge	.+82     	; 0x113c <savePassword+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ea:	6f a1       	ldd	r22, Y+39	; 0x27
    10ec:	78 a5       	ldd	r23, Y+40	; 0x28
    10ee:	89 a5       	ldd	r24, Y+41	; 0x29
    10f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e2       	ldi	r20, 0x20	; 32
    10f8:	51 e4       	ldi	r21, 0x41	; 65
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	9a a3       	std	Y+34, r25	; 0x22
    1110:	89 a3       	std	Y+33, r24	; 0x21
    1112:	0f c0       	rjmp	.+30     	; 0x1132 <savePassword+0x1c2>
    1114:	88 ec       	ldi	r24, 0xC8	; 200
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	98 a3       	std	Y+32, r25	; 0x20
    111a:	8f 8f       	std	Y+31, r24	; 0x1f
    111c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111e:	98 a1       	ldd	r25, Y+32	; 0x20
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <savePassword+0x1b0>
    1124:	98 a3       	std	Y+32, r25	; 0x20
    1126:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	89 a1       	ldd	r24, Y+33	; 0x21
    112a:	9a a1       	ldd	r25, Y+34	; 0x22
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	9a a3       	std	Y+34, r25	; 0x22
    1130:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	89 a1       	ldd	r24, Y+33	; 0x21
    1134:	9a a1       	ldd	r25, Y+34	; 0x22
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	69 f7       	brne	.-38     	; 0x1114 <savePassword+0x1a4>
    113a:	14 c0       	rjmp	.+40     	; 0x1164 <savePassword+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	6b a1       	ldd	r22, Y+35	; 0x23
    113e:	7c a1       	ldd	r23, Y+36	; 0x24
    1140:	8d a1       	ldd	r24, Y+37	; 0x25
    1142:	9e a1       	ldd	r25, Y+38	; 0x26
    1144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9a a3       	std	Y+34, r25	; 0x22
    114e:	89 a3       	std	Y+33, r24	; 0x21
    1150:	89 a1       	ldd	r24, Y+33	; 0x21
    1152:	9a a1       	ldd	r25, Y+34	; 0x22
    1154:	9e 8f       	std	Y+30, r25	; 0x1e
    1156:	8d 8f       	std	Y+29, r24	; 0x1d
    1158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    115a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <savePassword+0x1ec>
    1160:	9e 8f       	std	Y+30, r25	; 0x1e
    1162:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
		}while((!((key_num>=0) && (key_num<=9))));
    1164:	8d ad       	ldd	r24, Y+61	; 0x3d
    1166:	8a 30       	cpi	r24, 0x0A	; 10
    1168:	08 f0       	brcs	.+2      	; 0x116c <savePassword+0x1fc>
    116a:	87 cf       	rjmp	.-242    	; 0x107a <savePassword+0x10a>

		/*when this loop end this means that the user entered from 0 to 9*/

		/*set the pass in the confirmation array*/
		arr_pass[passCounter] = key_num;
    116c:	89 ad       	ldd	r24, Y+57	; 0x39
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8a ad       	ldd	r24, Y+58	; 0x3a
    1174:	9b ad       	ldd	r25, Y+59	; 0x3b
    1176:	fc 01       	movw	r30, r24
    1178:	e2 0f       	add	r30, r18
    117a:	f3 1f       	adc	r31, r19
    117c:	8d ad       	ldd	r24, Y+61	; 0x3d
    117e:	80 83       	st	Z, r24
		/* display on the LCD as ASCII '*' */
		LCD_displayCharacter(PASSWORD_MARK);
    1180:	8a e2       	ldi	r24, 0x2A	; 42
    1182:	0e 94 28 16 	call	0x2c50	; 0x2c50 <LCD_displayCharacter>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	aa ef       	ldi	r26, 0xFA	; 250
    118c:	b3 e4       	ldi	r27, 0x43	; 67
    118e:	89 8f       	std	Y+25, r24	; 0x19
    1190:	9a 8f       	std	Y+26, r25	; 0x1a
    1192:	ab 8f       	std	Y+27, r26	; 0x1b
    1194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	69 8d       	ldd	r22, Y+25	; 0x19
    1198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a ef       	ldi	r20, 0xFA	; 250
    11a4:	54 e4       	ldi	r21, 0x44	; 68
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8d 8b       	std	Y+21, r24	; 0x15
    11b0:	9e 8b       	std	Y+22, r25	; 0x16
    11b2:	af 8b       	std	Y+23, r26	; 0x17
    11b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b6:	6d 89       	ldd	r22, Y+21	; 0x15
    11b8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ba:	8f 89       	ldd	r24, Y+23	; 0x17
    11bc:	98 8d       	ldd	r25, Y+24	; 0x18
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <savePassword+0x268>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <savePassword+0x2e6>
	else if (__tmp > 65535)
    11d8:	6d 89       	ldd	r22, Y+21	; 0x15
    11da:	7e 89       	ldd	r23, Y+22	; 0x16
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <savePassword+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	69 8d       	ldd	r22, Y+25	; 0x19
    11f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <savePassword+0x2c8>
    121a:	88 ec       	ldi	r24, 0xC8	; 200
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	9a 8b       	std	Y+18, r25	; 0x12
    1220:	89 8b       	std	Y+17, r24	; 0x11
    1222:	89 89       	ldd	r24, Y+17	; 0x11
    1224:	9a 89       	ldd	r25, Y+18	; 0x12
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <savePassword+0x2b6>
    122a:	9a 8b       	std	Y+18, r25	; 0x12
    122c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8b 89       	ldd	r24, Y+19	; 0x13
    123a:	9c 89       	ldd	r25, Y+20	; 0x14
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <savePassword+0x2aa>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <savePassword+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6d 89       	ldd	r22, Y+21	; 0x15
    1244:	7e 89       	ldd	r23, Y+22	; 0x16
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9c 8b       	std	Y+20, r25	; 0x14
    1254:	8b 8b       	std	Y+19, r24	; 0x13
    1256:	8b 89       	ldd	r24, Y+19	; 0x13
    1258:	9c 89       	ldd	r25, Y+20	; 0x14
    125a:	98 8b       	std	Y+16, r25	; 0x10
    125c:	8f 87       	std	Y+15, r24	; 0x0f
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	98 89       	ldd	r25, Y+16	; 0x10
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <savePassword+0x2f2>
    1266:	98 8b       	std	Y+16, r25	; 0x10
    1268:	8f 87       	std	Y+15, r24	; 0x0f
	3. Key: values that take from the keypad
 */
void savePassword(uint8 *arr_pass , uint8 arr_size, uint8 key_num)
{
	/* send the 5bytes of the Password*/
	for(uint8 passCounter = 0; passCounter < PASSWORD_SIZE; passCounter++)
    126a:	89 ad       	ldd	r24, Y+57	; 0x39
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	89 af       	std	Y+57, r24	; 0x39
    1270:	89 ad       	ldd	r24, Y+57	; 0x39
    1272:	85 30       	cpi	r24, 0x05	; 5
    1274:	08 f4       	brcc	.+2      	; 0x1278 <savePassword+0x308>
    1276:	8c ce       	rjmp	.-744    	; 0xf90 <savePassword+0x20>
		_delay_ms(KEY_BUTTON_DELAY);	/*press time*/
	}
	do
	{
		/* won't save the password until the person press =*/
		key_num = KEYPAD_getPressedKey();
    1278:	0e 94 0c 12 	call	0x2418	; 0x2418 <KEYPAD_getPressedKey>
    127c:	8d af       	std	Y+61, r24	; 0x3d
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a8 e4       	ldi	r26, 0x48	; 72
    1284:	b2 e4       	ldi	r27, 0x42	; 66
    1286:	8b 87       	std	Y+11, r24	; 0x0b
    1288:	9c 87       	std	Y+12, r25	; 0x0c
    128a:	ad 87       	std	Y+13, r26	; 0x0d
    128c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a ef       	ldi	r20, 0xFA	; 250
    129c:	54 e4       	ldi	r21, 0x44	; 68
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8f 83       	std	Y+7, r24	; 0x07
    12a8:	98 87       	std	Y+8, r25	; 0x08
    12aa:	a9 87       	std	Y+9, r26	; 0x09
    12ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <savePassword+0x360>
		__ticks = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	3f c0       	rjmp	.+126    	; 0x134e <savePassword+0x3de>
	else if (__tmp > 65535)
    12d0:	6f 81       	ldd	r22, Y+7	; 0x07
    12d2:	78 85       	ldd	r23, Y+8	; 0x08
    12d4:	89 85       	ldd	r24, Y+9	; 0x09
    12d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	57 e4       	ldi	r21, 0x47	; 71
    12e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	4c f5       	brge	.+82     	; 0x133a <savePassword+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e2       	ldi	r20, 0x20	; 32
    12f6:	51 e4       	ldi	r21, 0x41	; 65
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <savePassword+0x3c0>
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <savePassword+0x3ae>
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	69 f7       	brne	.-38     	; 0x1312 <savePassword+0x3a2>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <savePassword+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9e 83       	std	Y+6, r25	; 0x06
    134c:	8d 83       	std	Y+5, r24	; 0x05
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <savePassword+0x3ea>
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
	}while(key_num != SUBMIT_PASSWORD);
    1362:	8d ad       	ldd	r24, Y+61	; 0x3d
    1364:	8d 33       	cpi	r24, 0x3D	; 61
    1366:	09 f0       	breq	.+2      	; 0x136a <savePassword+0x3fa>
    1368:	87 cf       	rjmp	.-242    	; 0x1278 <savePassword+0x308>
}
    136a:	ed 96       	adiw	r28, 0x3d	; 61
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <checkPasswordAfterCreation>:
/*
 * Description:
	Function to check whether the password correct or wrong
 */
void checkPasswordAfterCreation(void)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	e3 97       	sbiw	r28, 0x33	; 51
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61

	/* array to get the pass */
	uint8 arr_pass[PASSWORD_SIZE];

	/* variable to count the size of actual password*/
	uint8 passCounter = 0;
    1390:	1d a6       	std	Y+45, r1	; 0x2d

	/* variable to store the value while receiving if the password is wrong or not */
	uint8 password_receivig ;

	uint8 wrong_times = 0;	/* variable to store the wrong times that password have been submitted*/
    1392:	1b a6       	std	Y+43, r1	; 0x2b

	LCD_clearScreen();
    1394:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    13a0:	80 e6       	ldi	r24, 0x60	; 96
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
	LCD_moveCursor(1,0);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>

	/*enter your password that contains of 5 characters using keypad*/
	savePassword(arr_pass,PASSWORD_SIZE,key);
    13b0:	ce 01       	movw	r24, r28
    13b2:	8f 96       	adiw	r24, 0x2f	; 47
    13b4:	65 e0       	ldi	r22, 0x05	; 5
    13b6:	4e a5       	ldd	r20, Y+46	; 0x2e
    13b8:	0e 94 b8 07 	call	0xf70	; 0xf70 <savePassword>
	LCD_clearScreen();
    13bc:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>

	/* send the password to EEPROM to check whether the password is right or wrong*/
	UART_sendByte(PASSWORD_CHECK);
    13c0:	82 e1       	ldi	r24, 0x12	; 18
    13c2:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e2       	ldi	r26, 0x20	; 32
    13cc:	b1 e4       	ldi	r27, 0x41	; 65
    13ce:	8f a3       	std	Y+39, r24	; 0x27
    13d0:	98 a7       	std	Y+40, r25	; 0x28
    13d2:	a9 a7       	std	Y+41, r26	; 0x29
    13d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	6f a1       	ldd	r22, Y+39	; 0x27
    13d8:	78 a5       	ldd	r23, Y+40	; 0x28
    13da:	89 a5       	ldd	r24, Y+41	; 0x29
    13dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a ef       	ldi	r20, 0xFA	; 250
    13e4:	54 e4       	ldi	r21, 0x44	; 68
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8b a3       	std	Y+35, r24	; 0x23
    13f0:	9c a3       	std	Y+36, r25	; 0x24
    13f2:	ad a3       	std	Y+37, r26	; 0x25
    13f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13f6:	6b a1       	ldd	r22, Y+35	; 0x23
    13f8:	7c a1       	ldd	r23, Y+36	; 0x24
    13fa:	8d a1       	ldd	r24, Y+37	; 0x25
    13fc:	9e a1       	ldd	r25, Y+38	; 0x26
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <checkPasswordAfterCreation+0x9c>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9a a3       	std	Y+34, r25	; 0x22
    1414:	89 a3       	std	Y+33, r24	; 0x21
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <checkPasswordAfterCreation+0x11a>
	else if (__tmp > 65535)
    1418:	6b a1       	ldd	r22, Y+35	; 0x23
    141a:	7c a1       	ldd	r23, Y+36	; 0x24
    141c:	8d a1       	ldd	r24, Y+37	; 0x25
    141e:	9e a1       	ldd	r25, Y+38	; 0x26
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <checkPasswordAfterCreation+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	6f a1       	ldd	r22, Y+39	; 0x27
    1432:	78 a5       	ldd	r23, Y+40	; 0x28
    1434:	89 a5       	ldd	r24, Y+41	; 0x29
    1436:	9a a5       	ldd	r25, Y+42	; 0x2a
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9a a3       	std	Y+34, r25	; 0x22
    1456:	89 a3       	std	Y+33, r24	; 0x21
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <checkPasswordAfterCreation+0xfc>
    145a:	88 ec       	ldi	r24, 0xC8	; 200
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	98 a3       	std	Y+32, r25	; 0x20
    1460:	8f 8f       	std	Y+31, r24	; 0x1f
    1462:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1464:	98 a1       	ldd	r25, Y+32	; 0x20
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <checkPasswordAfterCreation+0xea>
    146a:	98 a3       	std	Y+32, r25	; 0x20
    146c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	89 a1       	ldd	r24, Y+33	; 0x21
    1470:	9a a1       	ldd	r25, Y+34	; 0x22
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9a a3       	std	Y+34, r25	; 0x22
    1476:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	89 a1       	ldd	r24, Y+33	; 0x21
    147a:	9a a1       	ldd	r25, Y+34	; 0x22
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <checkPasswordAfterCreation+0xde>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <checkPasswordAfterCreation+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6b a1       	ldd	r22, Y+35	; 0x23
    1484:	7c a1       	ldd	r23, Y+36	; 0x24
    1486:	8d a1       	ldd	r24, Y+37	; 0x25
    1488:	9e a1       	ldd	r25, Y+38	; 0x26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9a a3       	std	Y+34, r25	; 0x22
    1494:	89 a3       	std	Y+33, r24	; 0x21
    1496:	89 a1       	ldd	r24, Y+33	; 0x21
    1498:	9a a1       	ldd	r25, Y+34	; 0x22
    149a:	9e 8f       	std	Y+30, r25	; 0x1e
    149c:	8d 8f       	std	Y+29, r24	; 0x1d
    149e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <checkPasswordAfterCreation+0x126>
    14a6:	9e 8f       	std	Y+30, r25	; 0x1e
    14a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	/* loop to send the password to the EEPROM to be checked*/
	passCounter = 0;
    14aa:	1d a6       	std	Y+45, r1	; 0x2d
    14ac:	1b c0       	rjmp	.+54     	; 0x14e4 <checkPasswordAfterCreation+0x168>

	/* check if the two arrays of password are identical or not*/
	while(passCounter < PASSWORD_SIZE)
	{
		/* waits until MC2 receive*/
		while(UART_recieveByte()!=MC2_READY);
    14ae:	0e 94 b6 1a 	call	0x356c	; 0x356c <UART_recieveByte>
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <checkPasswordAfterCreation+0x132>

		/*send each byte*/
		UART_sendByte(arr_pass[passCounter]);
    14b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	ce 01       	movw	r24, r28
    14be:	8f 96       	adiw	r24, 0x2f	; 47
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	80 81       	ld	r24, Z
    14c8:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>

		password_receivig = UART_recieveByte();
    14cc:	0e 94 b6 1a 	call	0x356c	; 0x356c <UART_recieveByte>
    14d0:	8c a7       	std	Y+44, r24	; 0x2c
		if(password_receivig == PASSWORD_DOESNT_MATCH)
    14d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    14d4:	88 30       	cpi	r24, 0x08	; 8
    14d6:	19 f4       	brne	.+6      	; 0x14de <checkPasswordAfterCreation+0x162>
		{
			wrong_times++;
    14d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	8b a7       	std	Y+43, r24	; 0x2b
		}
		passCounter++;
    14de:	8d a5       	ldd	r24, Y+45	; 0x2d
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	8d a7       	std	Y+45, r24	; 0x2d
	/* loop to send the password to the EEPROM to be checked*/
	passCounter = 0;


	/* check if the two arrays of password are identical or not*/
	while(passCounter < PASSWORD_SIZE)
    14e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    14e6:	85 30       	cpi	r24, 0x05	; 5
    14e8:	10 f3       	brcs	.-60     	; 0x14ae <checkPasswordAfterCreation+0x132>
		}
		passCounter++;
	}

	/* this means that u have entered the password correct*/
	if(wrong_times == 0)
    14ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ec:	88 23       	and	r24, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <checkPasswordAfterCreation+0x176>
    14f0:	85 c0       	rjmp	.+266    	; 0x15fc <checkPasswordAfterCreation+0x280>
	{
		LCD_clearScreen();
    14f2:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
		LCD_moveCursor(0,1);
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
		LCD_displayString("Correct");
    14fe:	8c ea       	ldi	r24, 0xAC	; 172
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
		LCD_moveCursor(1,0);
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
		LCD_displayString("Password");
    150e:	84 eb       	ldi	r24, 0xB4	; 180
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	aa e7       	ldi	r26, 0x7A	; 122
    151c:	b4 e4       	ldi	r27, 0x44	; 68
    151e:	89 8f       	std	Y+25, r24	; 0x19
    1520:	9a 8f       	std	Y+26, r25	; 0x1a
    1522:	ab 8f       	std	Y+27, r26	; 0x1b
    1524:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1526:	69 8d       	ldd	r22, Y+25	; 0x19
    1528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    152a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a ef       	ldi	r20, 0xFA	; 250
    1534:	54 e4       	ldi	r21, 0x44	; 68
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8d 8b       	std	Y+21, r24	; 0x15
    1540:	9e 8b       	std	Y+22, r25	; 0x16
    1542:	af 8b       	std	Y+23, r26	; 0x17
    1544:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1546:	6d 89       	ldd	r22, Y+21	; 0x15
    1548:	7e 89       	ldd	r23, Y+22	; 0x16
    154a:	8f 89       	ldd	r24, Y+23	; 0x17
    154c:	98 8d       	ldd	r25, Y+24	; 0x18
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155a:	88 23       	and	r24, r24
    155c:	2c f4       	brge	.+10     	; 0x1568 <checkPasswordAfterCreation+0x1ec>
		__ticks = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	8b 8b       	std	Y+19, r24	; 0x13
    1566:	3f c0       	rjmp	.+126    	; 0x15e6 <checkPasswordAfterCreation+0x26a>
	else if (__tmp > 65535)
    1568:	6d 89       	ldd	r22, Y+21	; 0x15
    156a:	7e 89       	ldd	r23, Y+22	; 0x16
    156c:	8f 89       	ldd	r24, Y+23	; 0x17
    156e:	98 8d       	ldd	r25, Y+24	; 0x18
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157c:	18 16       	cp	r1, r24
    157e:	4c f5       	brge	.+82     	; 0x15d2 <checkPasswordAfterCreation+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1580:	69 8d       	ldd	r22, Y+25	; 0x19
    1582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9c 8b       	std	Y+20, r25	; 0x14
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <checkPasswordAfterCreation+0x24c>
    15aa:	88 ec       	ldi	r24, 0xC8	; 200
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9a 8b       	std	Y+18, r25	; 0x12
    15b0:	89 8b       	std	Y+17, r24	; 0x11
    15b2:	89 89       	ldd	r24, Y+17	; 0x11
    15b4:	9a 89       	ldd	r25, Y+18	; 0x12
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <checkPasswordAfterCreation+0x23a>
    15ba:	9a 8b       	std	Y+18, r25	; 0x12
    15bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	8b 89       	ldd	r24, Y+19	; 0x13
    15c0:	9c 89       	ldd	r25, Y+20	; 0x14
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	9c 8b       	std	Y+20, r25	; 0x14
    15c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ca:	9c 89       	ldd	r25, Y+20	; 0x14
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	69 f7       	brne	.-38     	; 0x15aa <checkPasswordAfterCreation+0x22e>
    15d0:	87 c0       	rjmp	.+270    	; 0x16e0 <checkPasswordAfterCreation+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	6d 89       	ldd	r22, Y+21	; 0x15
    15d4:	7e 89       	ldd	r23, Y+22	; 0x16
    15d6:	8f 89       	ldd	r24, Y+23	; 0x17
    15d8:	98 8d       	ldd	r25, Y+24	; 0x18
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9c 8b       	std	Y+20, r25	; 0x14
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
    15e8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ea:	98 8b       	std	Y+16, r25	; 0x10
    15ec:	8f 87       	std	Y+15, r24	; 0x0f
    15ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f0:	98 89       	ldd	r25, Y+16	; 0x10
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <checkPasswordAfterCreation+0x276>
    15f6:	98 8b       	std	Y+16, r25	; 0x10
    15f8:	8f 87       	std	Y+15, r24	; 0x0f
    15fa:	72 c0       	rjmp	.+228    	; 0x16e0 <checkPasswordAfterCreation+0x364>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	aa ef       	ldi	r26, 0xFA	; 250
    1602:	b3 e4       	ldi	r27, 0x43	; 67
    1604:	8b 87       	std	Y+11, r24	; 0x0b
    1606:	9c 87       	std	Y+12, r25	; 0x0c
    1608:	ad 87       	std	Y+13, r26	; 0x0d
    160a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	6b 85       	ldd	r22, Y+11	; 0x0b
    160e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1610:	8d 85       	ldd	r24, Y+13	; 0x0d
    1612:	9e 85       	ldd	r25, Y+14	; 0x0e
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4a ef       	ldi	r20, 0xFA	; 250
    161a:	54 e4       	ldi	r21, 0x44	; 68
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8f 83       	std	Y+7, r24	; 0x07
    1626:	98 87       	std	Y+8, r25	; 0x08
    1628:	a9 87       	std	Y+9, r26	; 0x09
    162a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162c:	6f 81       	ldd	r22, Y+7	; 0x07
    162e:	78 85       	ldd	r23, Y+8	; 0x08
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	9a 85       	ldd	r25, Y+10	; 0x0a
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e8       	ldi	r20, 0x80	; 128
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1640:	88 23       	and	r24, r24
    1642:	2c f4       	brge	.+10     	; 0x164e <checkPasswordAfterCreation+0x2d2>
		__ticks = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	3f c0       	rjmp	.+126    	; 0x16cc <checkPasswordAfterCreation+0x350>
	else if (__tmp > 65535)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	3f ef       	ldi	r19, 0xFF	; 255
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	57 e4       	ldi	r21, 0x47	; 71
    165e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	4c f5       	brge	.+82     	; 0x16b8 <checkPasswordAfterCreation+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1666:	6b 85       	ldd	r22, Y+11	; 0x0b
    1668:	7c 85       	ldd	r23, Y+12	; 0x0c
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <checkPasswordAfterCreation+0x332>
    1690:	88 ec       	ldi	r24, 0xC8	; 200
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	8b 83       	std	Y+3, r24	; 0x03
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <checkPasswordAfterCreation+0x320>
    16a0:	9c 83       	std	Y+4, r25	; 0x04
    16a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	69 f7       	brne	.-38     	; 0x1690 <checkPasswordAfterCreation+0x314>
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <checkPasswordAfterCreation+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <checkPasswordAfterCreation+0x35c>
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		_delay_ms(500);
	}
	g_flagPassword = password_receivig;	// to store the response
    16e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    16e2:	80 93 5b 01 	sts	0x015B, r24
}
    16e6:	e3 96       	adiw	r28, 0x33	; 51
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <doorSequence>:
 	 	 1. Door Unlocking 15 seconds
 	 	 2. Door Open 3 seconds
 	 	 3. Door Locking 15 seconds
 */
void doorSequence(void)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	2e 97       	sbiw	r28, 0x0e	; 14
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
	Timer1_init(&Timer1_Configuration);
    170c:	81 e5       	ldi	r24, 0x51	; 81
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <Timer1_init>
	Timer1_setCallBack(Timer_callBack);
    1714:	86 ec       	ldi	r24, 0xC6	; 198
    1716:	9e e0       	ldi	r25, 0x0E	; 14
    1718:	0e 94 a4 19 	call	0x3348	; 0x3348 <Timer1_setCallBack>

	/*1. Display The Door is Unlocking*/
	LCD_clearScreen();
    171c:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("Door is ");
    1728:	8d eb       	ldi	r24, 0xBD	; 189
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
		LCD_moveCursor(1,0);
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
		LCD_displayString("Unlocking");
    1738:	86 ec       	ldi	r24, 0xC6	; 198
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>

	/*set g_tick = 0 to clear it*/
	g_tick = 0;
    1740:	10 92 58 01 	sts	0x0158, r1
	/* waits until the door unlock time be done then break the loop*/
	while (g_tick != UNLOCK_DOOR_TIME) {} ;
    1744:	80 91 58 01 	lds	r24, 0x0158
    1748:	8f 30       	cpi	r24, 0x0F	; 15
    174a:	e1 f7       	brne	.-8      	; 0x1744 <doorSequence+0x4c>

	/*2. Display The Door is OPEN*/
	LCD_clearScreen();
    174c:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("Door is open");
    1758:	80 ed       	ldi	r24, 0xD0	; 208
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>

	/*set g_tick = 0 to clear it*/
	g_tick = 0;
    1760:	10 92 58 01 	sts	0x0158, r1
	/* waits until the door open time be done then break the loop*/
	while (g_tick != OPEN_DOOR_TIME) {} ;
    1764:	80 91 58 01 	lds	r24, 0x0158
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	e1 f7       	brne	.-8      	; 0x1764 <doorSequence+0x6c>


	/*3. Display The Door is Locking*/
	LCD_clearScreen();
    176c:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("Door is Locking");
    1778:	8d ed       	ldi	r24, 0xDD	; 221
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>

	/*set g_tick = 0 to clear it*/
	g_tick = 0;
    1780:	10 92 58 01 	sts	0x0158, r1
	/* waits until the door lock time be done then break the loop*/
	while (g_tick != LOCK_DOOR_TIME) {} ;
    1784:	80 91 58 01 	lds	r24, 0x0158
    1788:	8f 30       	cpi	r24, 0x0F	; 15
    178a:	e1 f7       	brne	.-8      	; 0x1784 <doorSequence+0x8c>
	Timer1_deInit();		/* stop the timer */
    178c:	0e 94 97 19 	call	0x332e	; 0x332e <Timer1_deInit>

	LCD_clearScreen();
    1790:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("Door is Locked");
    179c:	8d ee       	ldi	r24, 0xED	; 237
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	aa e7       	ldi	r26, 0x7A	; 122
    17aa:	b4 e4       	ldi	r27, 0x44	; 68
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
    17ae:	9c 87       	std	Y+12, r25	; 0x0c
    17b0:	ad 87       	std	Y+13, r26	; 0x0d
    17b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8f 83       	std	Y+7, r24	; 0x07
    17ce:	98 87       	std	Y+8, r25	; 0x08
    17d0:	a9 87       	std	Y+9, r26	; 0x09
    17d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <doorSequence+0xfe>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <doorSequence+0x17c>
	else if (__tmp > 65535)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <doorSequence+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <doorSequence+0x15e>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <doorSequence+0x14c>
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <doorSequence+0x140>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <doorSequence+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6f 81       	ldd	r22, Y+7	; 0x07
    1862:	78 85       	ldd	r23, Y+8	; 0x08
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <doorSequence+0x188>
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_DISPLAY_DELAY);	// to see this message

}
    1888:	2e 96       	adiw	r28, 0x0e	; 14
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <buzzerSequence>:
 * Function that after choosing the option +
 * and entered the password 3 times wrong
 	 	 It display ERROR for 60 seconds
 */
void buzzerSequence(void)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	2e 97       	sbiw	r28, 0x0e	; 14
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
	/* create configuration for timer to get interrupt every 1 second */
	Timer1_init(&Timer1_Configuration);
    18ae:	81 e5       	ldi	r24, 0x51	; 81
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <Timer1_init>
	Timer1_setCallBack(Timer_callBack);
    18b6:	86 ec       	ldi	r24, 0xC6	; 198
    18b8:	9e e0       	ldi	r25, 0x0E	; 14
    18ba:	0e 94 a4 19 	call	0x3348	; 0x3348 <Timer1_setCallBack>


	/*Display ERROR cause u have entered the max no allowed of passwords wrong*/
	LCD_clearScreen();
    18be:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_moveCursor(0,0);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("ERROR! 3 times");
    18ca:	8c ef       	ldi	r24, 0xFC	; 252
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
	LCD_moveCursor(1,0);
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("wait 60 sec");
    18da:	8b e0       	ldi	r24, 0x0B	; 11
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	aa e7       	ldi	r26, 0x7A	; 122
    18e8:	b4 e4       	ldi	r27, 0x44	; 68
    18ea:	8b 87       	std	Y+11, r24	; 0x0b
    18ec:	9c 87       	std	Y+12, r25	; 0x0c
    18ee:	ad 87       	std	Y+13, r26	; 0x0d
    18f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a ef       	ldi	r20, 0xFA	; 250
    1900:	54 e4       	ldi	r21, 0x44	; 68
    1902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	98 87       	std	Y+8, r25	; 0x08
    190e:	a9 87       	std	Y+9, r26	; 0x09
    1910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1912:	6f 81       	ldd	r22, Y+7	; 0x07
    1914:	78 85       	ldd	r23, Y+8	; 0x08
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1926:	88 23       	and	r24, r24
    1928:	2c f4       	brge	.+10     	; 0x1934 <buzzerSequence+0x9a>
		__ticks = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	3f c0       	rjmp	.+126    	; 0x19b2 <buzzerSequence+0x118>
	else if (__tmp > 65535)
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	4c f5       	brge	.+82     	; 0x199e <buzzerSequence+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	6b 85       	ldd	r22, Y+11	; 0x0b
    194e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <buzzerSequence+0xfa>
    1976:	88 ec       	ldi	r24, 0xC8	; 200
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <buzzerSequence+0xe8>
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <buzzerSequence+0xdc>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <buzzerSequence+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <buzzerSequence+0x124>
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_DISPLAY_DELAY);
	/* start the timer */
	Timer1_init(&Timer1_Configuration);
    19c6:	81 e5       	ldi	r24, 0x51	; 81
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <Timer1_init>
	/* waits until the error time be done then break the loop*/

	/*set g_tick = 0 to clear it*/
	g_tick = 0;
    19ce:	10 92 58 01 	sts	0x0158, r1
	/* waits until the door open time be done then break the loop*/
	while (g_tick != ERROR_TIME) {} ;
    19d2:	80 91 58 01 	lds	r24, 0x0158
    19d6:	8c 33       	cpi	r24, 0x3C	; 60
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <buzzerSequence+0x138>

	Timer1_deInit();		/* stop the timer */
    19da:	0e 94 97 19 	call	0x332e	; 0x332e <Timer1_deInit>
}
    19de:	2e 96       	adiw	r28, 0x0e	; 14
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <mainOptions>:
 	 	 2. Door Open 3 seconds
 	 	 3. Door Locking 15 seconds
 * 	- if you press '-' this means that u will change the password
 */
void mainOptions(void)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	ae 97       	sbiw	r28, 0x2e	; 46
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
	/* to get the pressed key */
	uint8 option;

	LCD_clearScreen();
    1a04:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	/*Display Options :		+ => Open Door		, - => set a new password*/
	LCD_moveCursor(0,1);
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("+ : Open Door");
    1a10:	87 e1       	ldi	r24, 0x17	; 23
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
	LCD_moveCursor(1,1);
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    1a20:	85 e2       	ldi	r24, 0x25	; 37
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	aa ef       	ldi	r26, 0xFA	; 250
    1a2e:	b3 e4       	ldi	r27, 0x43	; 67
    1a30:	8f a3       	std	Y+39, r24	; 0x27
    1a32:	98 a7       	std	Y+40, r25	; 0x28
    1a34:	a9 a7       	std	Y+41, r26	; 0x29
    1a36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	6f a1       	ldd	r22, Y+39	; 0x27
    1a3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a ef       	ldi	r20, 0xFA	; 250
    1a46:	54 e4       	ldi	r21, 0x44	; 68
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8b a3       	std	Y+35, r24	; 0x23
    1a52:	9c a3       	std	Y+36, r25	; 0x24
    1a54:	ad a3       	std	Y+37, r26	; 0x25
    1a56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a58:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <mainOptions+0x8a>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9a a3       	std	Y+34, r25	; 0x22
    1a76:	89 a3       	std	Y+33, r24	; 0x21
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <mainOptions+0x108>
	else if (__tmp > 65535)
    1a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a80:	9e a1       	ldd	r25, Y+38	; 0x26
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <mainOptions+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	6f a1       	ldd	r22, Y+39	; 0x27
    1a94:	78 a5       	ldd	r23, Y+40	; 0x28
    1a96:	89 a5       	ldd	r24, Y+41	; 0x29
    1a98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9a a3       	std	Y+34, r25	; 0x22
    1ab8:	89 a3       	std	Y+33, r24	; 0x21
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <mainOptions+0xea>
    1abc:	88 ec       	ldi	r24, 0xC8	; 200
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	98 a3       	std	Y+32, r25	; 0x20
    1ac2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <mainOptions+0xd8>
    1acc:	98 a3       	std	Y+32, r25	; 0x20
    1ace:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9a a3       	std	Y+34, r25	; 0x22
    1ad8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	89 a1       	ldd	r24, Y+33	; 0x21
    1adc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <mainOptions+0xcc>
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <mainOptions+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aea:	9e a1       	ldd	r25, Y+38	; 0x26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	89 a1       	ldd	r24, Y+33	; 0x21
    1afa:	9a a1       	ldd	r25, Y+34	; 0x22
    1afc:	9e 8f       	std	Y+30, r25	; 0x1e
    1afe:	8d 8f       	std	Y+29, r24	; 0x1d
    1b00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <mainOptions+0x114>
    1b08:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* make him must choose + or - any button else make him in the loop*/
	_delay_ms(500);
	do
	{
		/* get the pressed key value */
		option = KEYPAD_getPressedKey();
    1b0c:	0e 94 0c 12 	call	0x2418	; 0x2418 <KEYPAD_getPressedKey>
    1b10:	8c a7       	std	Y+44, r24	; 0x2c
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	aa ef       	ldi	r26, 0xFA	; 250
    1b18:	b3 e4       	ldi	r27, 0x43	; 67
    1b1a:	89 8f       	std	Y+25, r24	; 0x19
    1b1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	69 8d       	ldd	r22, Y+25	; 0x19
    1b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	4a ef       	ldi	r20, 0xFA	; 250
    1b30:	54 e4       	ldi	r21, 0x44	; 68
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8d 8b       	std	Y+21, r24	; 0x15
    1b3c:	9e 8b       	std	Y+22, r25	; 0x16
    1b3e:	af 8b       	std	Y+23, r26	; 0x17
    1b40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <mainOptions+0x174>
		__ticks = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9c 8b       	std	Y+20, r25	; 0x14
    1b60:	8b 8b       	std	Y+19, r24	; 0x13
    1b62:	3f c0       	rjmp	.+126    	; 0x1be2 <mainOptions+0x1f2>
	else if (__tmp > 65535)
    1b64:	6d 89       	ldd	r22, Y+21	; 0x15
    1b66:	7e 89       	ldd	r23, Y+22	; 0x16
    1b68:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	57 e4       	ldi	r21, 0x47	; 71
    1b74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	4c f5       	brge	.+82     	; 0x1bce <mainOptions+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9c 8b       	std	Y+20, r25	; 0x14
    1ba2:	8b 8b       	std	Y+19, r24	; 0x13
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <mainOptions+0x1d4>
    1ba6:	88 ec       	ldi	r24, 0xC8	; 200
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9a 8b       	std	Y+18, r25	; 0x12
    1bac:	89 8b       	std	Y+17, r24	; 0x11
    1bae:	89 89       	ldd	r24, Y+17	; 0x11
    1bb0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <mainOptions+0x1c2>
    1bb6:	9a 8b       	std	Y+18, r25	; 0x12
    1bb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9c 8b       	std	Y+20, r25	; 0x14
    1bc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <mainOptions+0x1b6>
    1bcc:	14 c0       	rjmp	.+40     	; 0x1bf6 <mainOptions+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
    1be2:	8b 89       	ldd	r24, Y+19	; 0x13
    1be4:	9c 89       	ldd	r25, Y+20	; 0x14
    1be6:	98 8b       	std	Y+16, r25	; 0x10
    1be8:	8f 87       	std	Y+15, r24	; 0x0f
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bec:	98 89       	ldd	r25, Y+16	; 0x10
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <mainOptions+0x1fe>
    1bf2:	98 8b       	std	Y+16, r25	; 0x10
    1bf4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(KEY_BUTTON_DELAY);
		if((option == OPEN_DOOR_OPTION) || (option == CHANGE_PASSWORD_OPTION))
    1bf6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bf8:	8b 32       	cpi	r24, 0x2B	; 43
    1bfa:	21 f0       	breq	.+8      	; 0x1c04 <mainOptions+0x214>
    1bfc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bfe:	8d 32       	cpi	r24, 0x2D	; 45
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <mainOptions+0x214>
    1c02:	84 cf       	rjmp	.-248    	; 0x1b0c <mainOptions+0x11c>
			break;
	}while(1);

	LCD_clearScreen();
    1c04:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>

	/* make loop that decrease from 3 to 0 to check no. of wrong times have beed inserted*/
	uint8 count = MAX_NO_OF_WRONG_TIMES;
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	8b a7       	std	Y+43, r24	; 0x2b
    1c0c:	89 c0       	rjmp	.+274    	; 0x1d20 <mainOptions+0x330>

	while(count>0)
	{
		/*send to MC2 OPEN the door so we need to insert password */
		UART_sendByte(SEND_PASSWORD_TO_BE_CHECKED);
    1c0e:	86 e0       	ldi	r24, 0x06	; 6
    1c10:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>

		checkPasswordAfterCreation();
    1c14:	0e 94 be 09 	call	0x137c	; 0x137c <checkPasswordAfterCreation>

		/* using the previous function[check pass] will effect the global flag status*/
		if(g_flagPassword == PASSWORD_MATCH)
    1c18:	80 91 5b 01 	lds	r24, 0x015B
    1c1c:	89 30       	cpi	r24, 0x09	; 9
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <mainOptions+0x232>
    1c20:	83 c0       	rjmp	.+262    	; 0x1d28 <mainOptions+0x338>
		{
			/*there nothing wrong with the password [correct]*/
			break;
		}
		/* if we didn't break the loop this means that the password is wrong */
		LCD_clearScreen();
    1c22:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
		LCD_moveCursor(0,1);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
		LCD_displayString("Wrong Pass");
    1c2e:	85 e3       	ldi	r24, 0x35	; 53
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	aa e7       	ldi	r26, 0x7A	; 122
    1c3c:	b4 e4       	ldi	r27, 0x44	; 68
    1c3e:	8b 87       	std	Y+11, r24	; 0x0b
    1c40:	9c 87       	std	Y+12, r25	; 0x0c
    1c42:	ad 87       	std	Y+13, r26	; 0x0d
    1c44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a ef       	ldi	r20, 0xFA	; 250
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	8f 83       	std	Y+7, r24	; 0x07
    1c60:	98 87       	std	Y+8, r25	; 0x08
    1c62:	a9 87       	std	Y+9, r26	; 0x09
    1c64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <mainOptions+0x298>
		__ticks = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	3f c0       	rjmp	.+126    	; 0x1d06 <mainOptions+0x316>
	else if (__tmp > 65535)
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	4c f5       	brge	.+82     	; 0x1cf2 <mainOptions+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	0f c0       	rjmp	.+30     	; 0x1ce8 <mainOptions+0x2f8>
    1cca:	88 ec       	ldi	r24, 0xC8	; 200
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <mainOptions+0x2e6>
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	69 f7       	brne	.-38     	; 0x1cca <mainOptions+0x2da>
    1cf0:	14 c0       	rjmp	.+40     	; 0x1d1a <mainOptions+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <mainOptions+0x322>
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LCD_DISPLAY_DELAY);
		count--;
    1d1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d1c:	81 50       	subi	r24, 0x01	; 1
    1d1e:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_clearScreen();

	/* make loop that decrease from 3 to 0 to check no. of wrong times have beed inserted*/
	uint8 count = MAX_NO_OF_WRONG_TIMES;

	while(count>0)
    1d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d22:	88 23       	and	r24, r24
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <mainOptions+0x338>
    1d26:	73 cf       	rjmp	.-282    	; 0x1c0e <mainOptions+0x21e>
		LCD_moveCursor(0,1);
		LCD_displayString("Wrong Pass");
		_delay_ms(LCD_DISPLAY_DELAY);
		count--;
	}
	if(g_flagPassword == PASSWORD_DOESNT_MATCH)
    1d28:	80 91 5b 01 	lds	r24, 0x015B
    1d2c:	88 30       	cpi	r24, 0x08	; 8
    1d2e:	31 f4       	brne	.+12     	; 0x1d3c <mainOptions+0x34c>
	{
		/* send command to the MC2 to turn the buzzer on */
		UART_sendByte(BUZZER_ON_BYTE);
    1d30:	81 e1       	ldi	r24, 0x11	; 17
    1d32:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>
		buzzerSequence();
    1d36:	0e 94 4d 0c 	call	0x189a	; 0x189a <buzzerSequence>
    1d3a:	1f c0       	rjmp	.+62     	; 0x1d7a <mainOptions+0x38a>
	}
	else if(g_flagPassword == PASSWORD_MATCH)
    1d3c:	80 91 5b 01 	lds	r24, 0x015B
    1d40:	89 30       	cpi	r24, 0x09	; 9
    1d42:	d9 f4       	brne	.+54     	; 0x1d7a <mainOptions+0x38a>
	{
		switch (option)
    1d44:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	3e a7       	std	Y+46, r19	; 0x2e
    1d4c:	2d a7       	std	Y+45, r18	; 0x2d
    1d4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d52:	8b 32       	cpi	r24, 0x2B	; 43
    1d54:	91 05       	cpc	r25, r1
    1d56:	31 f0       	breq	.+12     	; 0x1d64 <mainOptions+0x374>
    1d58:	2d a5       	ldd	r18, Y+45	; 0x2d
    1d5a:	3e a5       	ldd	r19, Y+46	; 0x2e
    1d5c:	2d 32       	cpi	r18, 0x2D	; 45
    1d5e:	31 05       	cpc	r19, r1
    1d60:	39 f0       	breq	.+14     	; 0x1d70 <mainOptions+0x380>
    1d62:	0b c0       	rjmp	.+22     	; 0x1d7a <mainOptions+0x38a>
		{
		case OPEN_DOOR_OPTION:
			/*send to MC2 to open the door [rotate the DC-motor]*/
			UART_sendByte(UNLOCK_THE_DOOR);
    1d64:	82 e1       	ldi	r24, 0x12	; 18
    1d66:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>
			doorSequence();
    1d6a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <doorSequence>
    1d6e:	05 c0       	rjmp	.+10     	; 0x1d7a <mainOptions+0x38a>
			break;
		case CHANGE_PASSWORD_OPTION:
			/*send to MC2 to change the password in the EEPROM */
			UART_sendByte(CHANGE_PASSWORD);
    1d70:	83 e1       	ldi	r24, 0x13	; 19
    1d72:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>
			createAndCheckPassword();
    1d76:	0e 94 c2 05 	call	0xb84	; 0xb84 <createAndCheckPassword>
			break;

		}
	}
}
    1d7a:	ae 96       	adiw	r28, 0x2e	; 46
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <Timer_callBack>:

/* Description:
 * 	used to set the required time in each task.
 */
void Timer_callBack(void)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1d94:	80 91 58 01 	lds	r24, 0x0158
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	80 93 58 01 	sts	0x0158, r24
	/* clear the register*/
	TCNT1_REG.TwoBytes = 0;
    1d9e:	ec e4       	ldi	r30, 0x4C	; 76
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	11 82       	std	Z+1, r1	; 0x01
    1da4:	10 82       	st	Z, r1
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <GPIO_setupPinDirection+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <GPIO_setupPinDirection+0x8>
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	6a 83       	std	Y+2, r22	; 0x02
    1dbe:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>= NUM_OF_PORTS || pin_num>= NUM_OF_PINS_PER_PORT)
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <GPIO_setupPinDirection+0x1c>
    1dc6:	d5 c0       	rjmp	.+426    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	88 30       	cpi	r24, 0x08	; 8
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <GPIO_setupPinDirection+0x24>
    1dce:	d1 c0       	rjmp	.+418    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	3d 83       	std	Y+5, r19	; 0x05
    1dd8:	2c 83       	std	Y+4, r18	; 0x04
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	91 05       	cpc	r25, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <GPIO_setupPinDirection+0x3a>
    1de4:	43 c0       	rjmp	.+134    	; 0x1e6c <GPIO_setupPinDirection+0xc0>
    1de6:	2c 81       	ldd	r18, Y+4	; 0x04
    1de8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dea:	22 30       	cpi	r18, 0x02	; 2
    1dec:	31 05       	cpc	r19, r1
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <GPIO_setupPinDirection+0x4e>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	71 f0       	breq	.+28     	; 0x1e14 <GPIO_setupPinDirection+0x68>
    1df8:	bc c0       	rjmp	.+376    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <GPIO_setupPinDirection+0x5a>
    1e04:	5f c0       	rjmp	.+190    	; 0x1ec4 <GPIO_setupPinDirection+0x118>
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
    1e08:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0a:	83 30       	cpi	r24, 0x03	; 3
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <GPIO_setupPinDirection+0x66>
    1e10:	85 c0       	rjmp	.+266    	; 0x1f1c <GPIO_setupPinDirection+0x170>
    1e12:	af c0       	rjmp	.+350    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	a1 f4       	brne	.+40     	; 0x1e42 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    1e1a:	aa e3       	ldi	r26, 0x3A	; 58
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ea e3       	ldi	r30, 0x3A	; 58
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <GPIO_setupPinDirection+0x8c>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <GPIO_setupPinDirection+0x88>
    1e3c:	84 2b       	or	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	98 c0       	rjmp	.+304    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRA, pin_num);
    1e42:	aa e3       	ldi	r26, 0x3A	; 58
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	ea e3       	ldi	r30, 0x3A	; 58
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <GPIO_setupPinDirection+0xb4>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <GPIO_setupPinDirection+0xb0>
    1e64:	80 95       	com	r24
    1e66:	84 23       	and	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	83 c0       	rjmp	.+262    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	a1 f4       	brne	.+40     	; 0x1e9a <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    1e72:	a7 e3       	ldi	r26, 0x37	; 55
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e7 e3       	ldi	r30, 0x37	; 55
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 2e       	mov	r0, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <GPIO_setupPinDirection+0xe4>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	0a 94       	dec	r0
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <GPIO_setupPinDirection+0xe0>
    1e94:	84 2b       	or	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	6c c0       	rjmp	.+216    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRB, pin_num);
    1e9a:	a7 e3       	ldi	r26, 0x37	; 55
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e7 e3       	ldi	r30, 0x37	; 55
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <GPIO_setupPinDirection+0x10c>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <GPIO_setupPinDirection+0x108>
    1ebc:	80 95       	com	r24
    1ebe:	84 23       	and	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	57 c0       	rjmp	.+174    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	a1 f4       	brne	.+40     	; 0x1ef2 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    1eca:	a4 e3       	ldi	r26, 0x34	; 52
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e4 e3       	ldi	r30, 0x34	; 52
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <GPIO_setupPinDirection+0x13c>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <GPIO_setupPinDirection+0x138>
    1eec:	84 2b       	or	r24, r20
    1eee:	8c 93       	st	X, r24
    1ef0:	40 c0       	rjmp	.+128    	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRC, pin_num);
    1ef2:	a4 e3       	ldi	r26, 0x34	; 52
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e4 e3       	ldi	r30, 0x34	; 52
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 2e       	mov	r0, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <GPIO_setupPinDirection+0x164>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	0a 94       	dec	r0
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <GPIO_setupPinDirection+0x160>
    1f14:	80 95       	com	r24
    1f16:	84 23       	and	r24, r20
    1f18:	8c 93       	st	X, r24
    1f1a:	2b c0       	rjmp	.+86     	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	a1 f4       	brne	.+40     	; 0x1f4a <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    1f22:	a1 e3       	ldi	r26, 0x31	; 49
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e1 e3       	ldi	r30, 0x31	; 49
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 2e       	mov	r0, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <GPIO_setupPinDirection+0x194>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <GPIO_setupPinDirection+0x190>
    1f44:	84 2b       	or	r24, r20
    1f46:	8c 93       	st	X, r24
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRD, pin_num);
    1f4a:	a1 e3       	ldi	r26, 0x31	; 49
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e1 e3       	ldi	r30, 0x31	; 49
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2f       	mov	r20, r24
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <GPIO_setupPinDirection+0x1bc>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <GPIO_setupPinDirection+0x1b8>
    1f6c:	80 95       	com	r24
    1f6e:	84 23       	and	r24, r20
    1f70:	8c 93       	st	X, r24
			break;
		}
	}
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <GPIO_writePin+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <GPIO_writePin+0x8>
    1f8a:	0f 92       	push	r0
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	6a 83       	std	Y+2, r22	; 0x02
    1f94:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>= NUM_OF_PORTS || pin_num>= NUM_OF_PINS_PER_PORT)
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	84 30       	cpi	r24, 0x04	; 4
    1f9a:	08 f0       	brcs	.+2      	; 0x1f9e <GPIO_writePin+0x1c>
    1f9c:	d5 c0       	rjmp	.+426    	; 0x2148 <GPIO_writePin+0x1c6>
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	88 30       	cpi	r24, 0x08	; 8
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <GPIO_writePin+0x24>
    1fa4:	d1 c0       	rjmp	.+418    	; 0x2148 <GPIO_writePin+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	3d 83       	std	Y+5, r19	; 0x05
    1fae:	2c 83       	std	Y+4, r18	; 0x04
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <GPIO_writePin+0x3a>
    1fba:	43 c0       	rjmp	.+134    	; 0x2042 <GPIO_writePin+0xc0>
    1fbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1fbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc0:	22 30       	cpi	r18, 0x02	; 2
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <GPIO_writePin+0x4e>
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	71 f0       	breq	.+28     	; 0x1fea <GPIO_writePin+0x68>
    1fce:	bc c0       	rjmp	.+376    	; 0x2148 <GPIO_writePin+0x1c6>
    1fd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd4:	22 30       	cpi	r18, 0x02	; 2
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <GPIO_writePin+0x5a>
    1fda:	5f c0       	rjmp	.+190    	; 0x209a <GPIO_writePin+0x118>
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe0:	83 30       	cpi	r24, 0x03	; 3
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <GPIO_writePin+0x66>
    1fe6:	85 c0       	rjmp	.+266    	; 0x20f2 <GPIO_writePin+0x170>
    1fe8:	af c0       	rjmp	.+350    	; 0x2148 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	a1 f4       	brne	.+40     	; 0x2018 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1ff0:	ab e3       	ldi	r26, 0x3B	; 59
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	eb e3       	ldi	r30, 0x3B	; 59
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	48 2f       	mov	r20, r24
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	02 2e       	mov	r0, r18
    2008:	02 c0       	rjmp	.+4      	; 0x200e <GPIO_writePin+0x8c>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	0a 94       	dec	r0
    2010:	e2 f7       	brpl	.-8      	; 0x200a <GPIO_writePin+0x88>
    2012:	84 2b       	or	r24, r20
    2014:	8c 93       	st	X, r24
    2016:	98 c0       	rjmp	.+304    	; 0x2148 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    2018:	ab e3       	ldi	r26, 0x3B	; 59
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	eb e3       	ldi	r30, 0x3B	; 59
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	48 2f       	mov	r20, r24
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 2e       	mov	r0, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <GPIO_writePin+0xb4>
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	0a 94       	dec	r0
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <GPIO_writePin+0xb0>
    203a:	80 95       	com	r24
    203c:	84 23       	and	r24, r20
    203e:	8c 93       	st	X, r24
    2040:	83 c0       	rjmp	.+262    	; 0x2148 <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	a1 f4       	brne	.+40     	; 0x2070 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    2048:	a8 e3       	ldi	r26, 0x38	; 56
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e8 e3       	ldi	r30, 0x38	; 56
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <GPIO_writePin+0xe4>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <GPIO_writePin+0xe0>
    206a:	84 2b       	or	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	6c c0       	rjmp	.+216    	; 0x2148 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    2070:	a8 e3       	ldi	r26, 0x38	; 56
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e8 e3       	ldi	r30, 0x38	; 56
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	48 2f       	mov	r20, r24
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 2e       	mov	r0, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <GPIO_writePin+0x10c>
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	0a 94       	dec	r0
    2090:	e2 f7       	brpl	.-8      	; 0x208a <GPIO_writePin+0x108>
    2092:	80 95       	com	r24
    2094:	84 23       	and	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	57 c0       	rjmp	.+174    	; 0x2148 <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	a1 f4       	brne	.+40     	; 0x20c8 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    20a0:	a5 e3       	ldi	r26, 0x35	; 53
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e3       	ldi	r30, 0x35	; 53
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <GPIO_writePin+0x13c>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <GPIO_writePin+0x138>
    20c2:	84 2b       	or	r24, r20
    20c4:	8c 93       	st	X, r24
    20c6:	40 c0       	rjmp	.+128    	; 0x2148 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    20c8:	a5 e3       	ldi	r26, 0x35	; 53
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e3       	ldi	r30, 0x35	; 53
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	48 2f       	mov	r20, r24
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 2e       	mov	r0, r18
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <GPIO_writePin+0x164>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <GPIO_writePin+0x160>
    20ea:	80 95       	com	r24
    20ec:	84 23       	and	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	2b c0       	rjmp	.+86     	; 0x2148 <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	a1 f4       	brne	.+40     	; 0x2120 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    20f8:	a2 e3       	ldi	r26, 0x32	; 50
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e2 e3       	ldi	r30, 0x32	; 50
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	48 2f       	mov	r20, r24
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <GPIO_writePin+0x194>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <GPIO_writePin+0x190>
    211a:	84 2b       	or	r24, r20
    211c:	8c 93       	st	X, r24
    211e:	14 c0       	rjmp	.+40     	; 0x2148 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    2120:	a2 e3       	ldi	r26, 0x32	; 50
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e2 e3       	ldi	r30, 0x32	; 50
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	48 2f       	mov	r20, r24
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	02 2e       	mov	r0, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <GPIO_writePin+0x1bc>
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	0a 94       	dec	r0
    2140:	e2 f7       	brpl	.-8      	; 0x213a <GPIO_writePin+0x1b8>
    2142:	80 95       	com	r24
    2144:	84 23       	and	r24, r20
    2146:	8c 93       	st	X, r24
			break;
		}
	}
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <GPIO_readPin+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <GPIO_readPin+0x8>
    2160:	0f 92       	push	r0
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	8a 83       	std	Y+2, r24	; 0x02
    2168:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    216a:	19 82       	std	Y+1, r1	; 0x01
	switch(port_num)
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	3d 83       	std	Y+5, r19	; 0x05
    2174:	2c 83       	std	Y+4, r18	; 0x04
    2176:	4c 81       	ldd	r20, Y+4	; 0x04
    2178:	5d 81       	ldd	r21, Y+5	; 0x05
    217a:	41 30       	cpi	r20, 0x01	; 1
    217c:	51 05       	cpc	r21, r1
    217e:	79 f1       	breq	.+94     	; 0x21de <GPIO_readPin+0x86>
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9d 81       	ldd	r25, Y+5	; 0x05
    2184:	82 30       	cpi	r24, 0x02	; 2
    2186:	91 05       	cpc	r25, r1
    2188:	34 f4       	brge	.+12     	; 0x2196 <GPIO_readPin+0x3e>
    218a:	2c 81       	ldd	r18, Y+4	; 0x04
    218c:	3d 81       	ldd	r19, Y+5	; 0x05
    218e:	21 15       	cp	r18, r1
    2190:	31 05       	cpc	r19, r1
    2192:	69 f0       	breq	.+26     	; 0x21ae <GPIO_readPin+0x56>
    2194:	6b c0       	rjmp	.+214    	; 0x226c <GPIO_readPin+0x114>
    2196:	4c 81       	ldd	r20, Y+4	; 0x04
    2198:	5d 81       	ldd	r21, Y+5	; 0x05
    219a:	42 30       	cpi	r20, 0x02	; 2
    219c:	51 05       	cpc	r21, r1
    219e:	b9 f1       	breq	.+110    	; 0x220e <GPIO_readPin+0xb6>
    21a0:	8c 81       	ldd	r24, Y+4	; 0x04
    21a2:	9d 81       	ldd	r25, Y+5	; 0x05
    21a4:	83 30       	cpi	r24, 0x03	; 3
    21a6:	91 05       	cpc	r25, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <GPIO_readPin+0x54>
    21aa:	49 c0       	rjmp	.+146    	; 0x223e <GPIO_readPin+0xe6>
    21ac:	5f c0       	rjmp	.+190    	; 0x226c <GPIO_readPin+0x114>
	{
	case PORTA_ID:
		if(BIT_IS_SET(PINA,pin_num))
    21ae:	e9 e3       	ldi	r30, 0x39	; 57
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <GPIO_readPin+0x6e>
    21c2:	55 95       	asr	r21
    21c4:	47 95       	ror	r20
    21c6:	8a 95       	dec	r24
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <GPIO_readPin+0x6a>
    21ca:	ca 01       	movw	r24, r20
    21cc:	81 70       	andi	r24, 0x01	; 1
    21ce:	90 70       	andi	r25, 0x00	; 0
    21d0:	88 23       	and	r24, r24
    21d2:	19 f0       	breq	.+6      	; 0x21da <GPIO_readPin+0x82>
			value = LOGIC_HIGH;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	49 c0       	rjmp	.+146    	; 0x226c <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    21da:	19 82       	std	Y+1, r1	; 0x01
    21dc:	47 c0       	rjmp	.+142    	; 0x226c <GPIO_readPin+0x114>
		break;
	case PORTB_ID:
		if(BIT_IS_SET(PINB,pin_num))
    21de:	e6 e3       	ldi	r30, 0x36	; 54
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a9 01       	movw	r20, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <GPIO_readPin+0x9e>
    21f2:	55 95       	asr	r21
    21f4:	47 95       	ror	r20
    21f6:	8a 95       	dec	r24
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <GPIO_readPin+0x9a>
    21fa:	ca 01       	movw	r24, r20
    21fc:	81 70       	andi	r24, 0x01	; 1
    21fe:	90 70       	andi	r25, 0x00	; 0
    2200:	88 23       	and	r24, r24
    2202:	19 f0       	breq	.+6      	; 0x220a <GPIO_readPin+0xb2>
			value = LOGIC_HIGH;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	31 c0       	rjmp	.+98     	; 0x226c <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    220a:	19 82       	std	Y+1, r1	; 0x01
    220c:	2f c0       	rjmp	.+94     	; 0x226c <GPIO_readPin+0x114>
		break;
	case PORTC_ID:
		if(BIT_IS_SET(PINC,pin_num))
    220e:	e3 e3       	ldi	r30, 0x33	; 51
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a9 01       	movw	r20, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <GPIO_readPin+0xce>
    2222:	55 95       	asr	r21
    2224:	47 95       	ror	r20
    2226:	8a 95       	dec	r24
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <GPIO_readPin+0xca>
    222a:	ca 01       	movw	r24, r20
    222c:	81 70       	andi	r24, 0x01	; 1
    222e:	90 70       	andi	r25, 0x00	; 0
    2230:	88 23       	and	r24, r24
    2232:	19 f0       	breq	.+6      	; 0x223a <GPIO_readPin+0xe2>
			value = LOGIC_HIGH;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	19 c0       	rjmp	.+50     	; 0x226c <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    223a:	19 82       	std	Y+1, r1	; 0x01
    223c:	17 c0       	rjmp	.+46     	; 0x226c <GPIO_readPin+0x114>
		break;
	case PORTD_ID:
		if(BIT_IS_SET(PIND,pin_num))
    223e:	e0 e3       	ldi	r30, 0x30	; 48
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	88 2f       	mov	r24, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a9 01       	movw	r20, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <GPIO_readPin+0xfe>
    2252:	55 95       	asr	r21
    2254:	47 95       	ror	r20
    2256:	8a 95       	dec	r24
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <GPIO_readPin+0xfa>
    225a:	ca 01       	movw	r24, r20
    225c:	81 70       	andi	r24, 0x01	; 1
    225e:	90 70       	andi	r25, 0x00	; 0
    2260:	88 23       	and	r24, r24
    2262:	19 f0       	breq	.+6      	; 0x226a <GPIO_readPin+0x112>
			value = LOGIC_HIGH;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	01 c0       	rjmp	.+2      	; 0x226c <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    226a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return value;
    226c:	89 81       	ldd	r24, Y+1	; 0x01
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	00 d0       	rcall	.+0      	; 0x2284 <GPIO_setupPortDirection+0x6>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <GPIO_setupPortDirection+0x8>
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num>=NUM_OF_PORTS)
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	84 30       	cpi	r24, 0x04	; 4
    2292:	90 f5       	brcc	.+100    	; 0x22f8 <GPIO_setupPortDirection+0x7a>
		/*Do Nothing*/
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	3c 83       	std	Y+4, r19	; 0x04
    229c:	2b 83       	std	Y+3, r18	; 0x03
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	91 05       	cpc	r25, r1
    22a6:	d1 f0       	breq	.+52     	; 0x22dc <GPIO_setupPortDirection+0x5e>
    22a8:	2b 81       	ldd	r18, Y+3	; 0x03
    22aa:	3c 81       	ldd	r19, Y+4	; 0x04
    22ac:	22 30       	cpi	r18, 0x02	; 2
    22ae:	31 05       	cpc	r19, r1
    22b0:	2c f4       	brge	.+10     	; 0x22bc <GPIO_setupPortDirection+0x3e>
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	61 f0       	breq	.+24     	; 0x22d2 <GPIO_setupPortDirection+0x54>
    22ba:	1e c0       	rjmp	.+60     	; 0x22f8 <GPIO_setupPortDirection+0x7a>
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	81 f0       	breq	.+32     	; 0x22e6 <GPIO_setupPortDirection+0x68>
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	91 05       	cpc	r25, r1
    22ce:	81 f0       	breq	.+32     	; 0x22f0 <GPIO_setupPortDirection+0x72>
    22d0:	13 c0       	rjmp	.+38     	; 0x22f8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    22d2:	ea e3       	ldi	r30, 0x3A	; 58
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	80 83       	st	Z, r24
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    22dc:	e7 e3       	ldi	r30, 0x37	; 55
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	80 83       	st	Z, r24
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    22e6:	e4 e3       	ldi	r30, 0x34	; 52
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	80 83       	st	Z, r24
    22ee:	04 c0       	rjmp	.+8      	; 0x22f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    22f0:	e1 e3       	ldi	r30, 0x31	; 49
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <GPIO_writePort+0x6>
    230c:	00 d0       	rcall	.+0      	; 0x230e <GPIO_writePort+0x8>
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS)
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	84 30       	cpi	r24, 0x04	; 4
    231a:	90 f5       	brcc	.+100    	; 0x2380 <GPIO_writePort+0x7a>
	{
			/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	3c 83       	std	Y+4, r19	; 0x04
    2324:	2b 83       	std	Y+3, r18	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	81 30       	cpi	r24, 0x01	; 1
    232c:	91 05       	cpc	r25, r1
    232e:	d1 f0       	breq	.+52     	; 0x2364 <GPIO_writePort+0x5e>
    2330:	2b 81       	ldd	r18, Y+3	; 0x03
    2332:	3c 81       	ldd	r19, Y+4	; 0x04
    2334:	22 30       	cpi	r18, 0x02	; 2
    2336:	31 05       	cpc	r19, r1
    2338:	2c f4       	brge	.+10     	; 0x2344 <GPIO_writePort+0x3e>
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	61 f0       	breq	.+24     	; 0x235a <GPIO_writePort+0x54>
    2342:	1e c0       	rjmp	.+60     	; 0x2380 <GPIO_writePort+0x7a>
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	22 30       	cpi	r18, 0x02	; 2
    234a:	31 05       	cpc	r19, r1
    234c:	81 f0       	breq	.+32     	; 0x236e <GPIO_writePort+0x68>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	91 05       	cpc	r25, r1
    2356:	81 f0       	breq	.+32     	; 0x2378 <GPIO_writePort+0x72>
    2358:	13 c0       	rjmp	.+38     	; 0x2380 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    235a:	eb e3       	ldi	r30, 0x3B	; 59
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	80 83       	st	Z, r24
    2362:	0e c0       	rjmp	.+28     	; 0x2380 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2364:	e8 e3       	ldi	r30, 0x38	; 56
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	80 83       	st	Z, r24
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    236e:	e5 e3       	ldi	r30, 0x35	; 53
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	80 83       	st	Z, r24
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2378:	e2 e3       	ldi	r30, 0x32	; 50
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	00 d0       	rcall	.+0      	; 0x2394 <GPIO_readPort+0x6>
    2394:	00 d0       	rcall	.+0      	; 0x2396 <GPIO_readPort+0x8>
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	8a 83       	std	Y+2, r24	; 0x02
	/* set the default of the value = Zero */
	uint8 value = LOGIC_LOW;
    239c:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS)
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	84 30       	cpi	r24, 0x04	; 4
    23a2:	90 f5       	brcc	.+100    	; 0x2408 <GPIO_readPort+0x7a>
	{
			/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	3c 83       	std	Y+4, r19	; 0x04
    23ac:	2b 83       	std	Y+3, r18	; 0x03
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	91 05       	cpc	r25, r1
    23b6:	d1 f0       	breq	.+52     	; 0x23ec <GPIO_readPort+0x5e>
    23b8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ba:	3c 81       	ldd	r19, Y+4	; 0x04
    23bc:	22 30       	cpi	r18, 0x02	; 2
    23be:	31 05       	cpc	r19, r1
    23c0:	2c f4       	brge	.+10     	; 0x23cc <GPIO_readPort+0x3e>
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	61 f0       	breq	.+24     	; 0x23e2 <GPIO_readPort+0x54>
    23ca:	1e c0       	rjmp	.+60     	; 0x2408 <GPIO_readPort+0x7a>
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	22 30       	cpi	r18, 0x02	; 2
    23d2:	31 05       	cpc	r19, r1
    23d4:	81 f0       	breq	.+32     	; 0x23f6 <GPIO_readPort+0x68>
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	83 30       	cpi	r24, 0x03	; 3
    23dc:	91 05       	cpc	r25, r1
    23de:	81 f0       	breq	.+32     	; 0x2400 <GPIO_readPort+0x72>
    23e0:	13 c0       	rjmp	.+38     	; 0x2408 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    23e2:	e9 e3       	ldi	r30, 0x39	; 57
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	0e c0       	rjmp	.+28     	; 0x2408 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    23ec:	e6 e3       	ldi	r30, 0x36	; 54
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	09 c0       	rjmp	.+18     	; 0x2408 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    23f6:	e3 e3       	ldi	r30, 0x33	; 51
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2400:	e0 e3       	ldi	r30, 0x30	; 48
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    2408:	89 81       	ldd	r24, Y+1	; 0x01
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	60 97       	sbiw	r28, 0x10	; 16
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	63 e0       	ldi	r22, 0x03	; 3
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	64 e0       	ldi	r22, 0x04	; 4
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	65 e0       	ldi	r22, 0x05	; 5
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	66 e0       	ldi	r22, 0x06	; 6
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2468:	82 e0       	ldi	r24, 0x02	; 2
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	63 e0       	ldi	r22, 0x03	; 3
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    247c:	1f 86       	std	Y+15, r1	; 0x0f
    247e:	b1 c0       	rjmp	.+354    	; 0x25e2 <KEYPAD_getPressedKey+0x1ca>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2480:	8f 85       	ldd	r24, Y+15	; 0x0f
    2482:	98 2f       	mov	r25, r24
    2484:	9d 5f       	subi	r25, 0xFD	; 253
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	69 2f       	mov	r22, r25
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	98 2f       	mov	r25, r24
    2494:	9d 5f       	subi	r25, 0xFD	; 253
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	69 2f       	mov	r22, r25
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    24a0:	18 8a       	std	Y+16, r1	; 0x10
    24a2:	1f c0       	rjmp	.+62     	; 0x24e2 <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	68 89       	ldd	r22, Y+16	; 0x10
    24a8:	0e 94 ac 10 	call	0x2158	; 0x2158 <GPIO_readPin>
    24ac:	88 23       	and	r24, r24
    24ae:	b1 f4       	brne	.+44     	; 0x24dc <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    24b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	98 2f       	mov	r25, r24
    24c0:	88 89       	ldd	r24, Y+16	; 0x10
    24c2:	89 0f       	add	r24, r25
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    24ca:	60 96       	adiw	r28, 0x10	; 16
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    24dc:	88 89       	ldd	r24, Y+16	; 0x10
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	88 8b       	std	Y+16, r24	; 0x10
    24e2:	88 89       	ldd	r24, Y+16	; 0x10
    24e4:	84 30       	cpi	r24, 0x04	; 4
    24e6:	f0 f2       	brcs	.-68     	; 0x24a4 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    24e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ea:	98 2f       	mov	r25, r24
    24ec:	9d 5f       	subi	r25, 0xFD	; 253
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	69 2f       	mov	r22, r25
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 ea       	ldi	r26, 0xA0	; 160
    24fe:	b0 e4       	ldi	r27, 0x40	; 64
    2500:	8b 87       	std	Y+11, r24	; 0x0b
    2502:	9c 87       	std	Y+12, r25	; 0x0c
    2504:	ad 87       	std	Y+13, r26	; 0x0d
    2506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	6b 85       	ldd	r22, Y+11	; 0x0b
    250a:	7c 85       	ldd	r23, Y+12	; 0x0c
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a ef       	ldi	r20, 0xFA	; 250
    2516:	54 e4       	ldi	r21, 0x44	; 68
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8f 83       	std	Y+7, r24	; 0x07
    2522:	98 87       	std	Y+8, r25	; 0x08
    2524:	a9 87       	std	Y+9, r26	; 0x09
    2526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2528:	6f 81       	ldd	r22, Y+7	; 0x07
    252a:	78 85       	ldd	r23, Y+8	; 0x08
    252c:	89 85       	ldd	r24, Y+9	; 0x09
    252e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	78 85       	ldd	r23, Y+8	; 0x08
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	4c f5       	brge	.+82     	; 0x25b4 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	6b 85       	ldd	r22, Y+11	; 0x0b
    2564:	7c 85       	ldd	r23, Y+12	; 0x0c
    2566:	8d 85       	ldd	r24, Y+13	; 0x0d
    2568:	9e 85       	ldd	r25, Y+14	; 0x0e
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9e 83       	std	Y+6, r25	; 0x06
    2588:	8d 83       	std	Y+5, r24	; 0x05
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <KEYPAD_getPressedKey+0x192>
    258c:	88 ec       	ldi	r24, 0xC8	; 200
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	9c 83       	std	Y+4, r25	; 0x04
    2592:	8b 83       	std	Y+3, r24	; 0x03
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <KEYPAD_getPressedKey+0x180>
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	69 f7       	brne	.-38     	; 0x258c <KEYPAD_getPressedKey+0x174>
    25b2:	14 c0       	rjmp	.+40     	; 0x25dc <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <KEYPAD_getPressedKey+0x1bc>
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    25dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25de:	8f 5f       	subi	r24, 0xFF	; 255
    25e0:	8f 87       	std	Y+15, r24	; 0x0f
    25e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e4:	84 30       	cpi	r24, 0x04	; 4
    25e6:	08 f4       	brcc	.+2      	; 0x25ea <KEYPAD_getPressedKey+0x1d2>
    25e8:	4b cf       	rjmp	.-362    	; 0x2480 <KEYPAD_getPressedKey+0x68>
    25ea:	48 cf       	rjmp	.-368    	; 0x247c <KEYPAD_getPressedKey+0x64>

000025ec <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    25fa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	3c 83       	std	Y+4, r19	; 0x04
    2604:	2b 83       	std	Y+3, r18	; 0x03
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	88 30       	cpi	r24, 0x08	; 8
    260c:	91 05       	cpc	r25, r1
    260e:	09 f4       	brne	.+2      	; 0x2612 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2610:	70 c0       	rjmp	.+224    	; 0x26f2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2612:	2b 81       	ldd	r18, Y+3	; 0x03
    2614:	3c 81       	ldd	r19, Y+4	; 0x04
    2616:	29 30       	cpi	r18, 0x09	; 9
    2618:	31 05       	cpc	r19, r1
    261a:	5c f5       	brge	.+86     	; 0x2672 <KEYPAD_4x4_adjustKeyNumber+0x86>
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	84 30       	cpi	r24, 0x04	; 4
    2622:	91 05       	cpc	r25, r1
    2624:	09 f4       	brne	.+2      	; 0x2628 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2626:	59 c0       	rjmp	.+178    	; 0x26da <KEYPAD_4x4_adjustKeyNumber+0xee>
    2628:	2b 81       	ldd	r18, Y+3	; 0x03
    262a:	3c 81       	ldd	r19, Y+4	; 0x04
    262c:	25 30       	cpi	r18, 0x05	; 5
    262e:	31 05       	cpc	r19, r1
    2630:	9c f4       	brge	.+38     	; 0x2658 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	91 05       	cpc	r25, r1
    263a:	09 f4       	brne	.+2      	; 0x263e <KEYPAD_4x4_adjustKeyNumber+0x52>
    263c:	48 c0       	rjmp	.+144    	; 0x26ce <KEYPAD_4x4_adjustKeyNumber+0xe2>
    263e:	2b 81       	ldd	r18, Y+3	; 0x03
    2640:	3c 81       	ldd	r19, Y+4	; 0x04
    2642:	23 30       	cpi	r18, 0x03	; 3
    2644:	31 05       	cpc	r19, r1
    2646:	0c f0       	brlt	.+2      	; 0x264a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2648:	45 c0       	rjmp	.+138    	; 0x26d4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	91 05       	cpc	r25, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2654:	39 c0       	rjmp	.+114    	; 0x26c8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2656:	67 c0       	rjmp	.+206    	; 0x2726 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2658:	2b 81       	ldd	r18, Y+3	; 0x03
    265a:	3c 81       	ldd	r19, Y+4	; 0x04
    265c:	26 30       	cpi	r18, 0x06	; 6
    265e:	31 05       	cpc	r19, r1
    2660:	09 f4       	brne	.+2      	; 0x2664 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2662:	41 c0       	rjmp	.+130    	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	87 30       	cpi	r24, 0x07	; 7
    266a:	91 05       	cpc	r25, r1
    266c:	0c f0       	brlt	.+2      	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x84>
    266e:	3e c0       	rjmp	.+124    	; 0x26ec <KEYPAD_4x4_adjustKeyNumber+0x100>
    2670:	37 c0       	rjmp	.+110    	; 0x26e0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2672:	2b 81       	ldd	r18, Y+3	; 0x03
    2674:	3c 81       	ldd	r19, Y+4	; 0x04
    2676:	2c 30       	cpi	r18, 0x0C	; 12
    2678:	31 05       	cpc	r19, r1
    267a:	09 f4       	brne	.+2      	; 0x267e <KEYPAD_4x4_adjustKeyNumber+0x92>
    267c:	46 c0       	rjmp	.+140    	; 0x270a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	8d 30       	cpi	r24, 0x0D	; 13
    2684:	91 05       	cpc	r25, r1
    2686:	5c f4       	brge	.+22     	; 0x269e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2688:	2b 81       	ldd	r18, Y+3	; 0x03
    268a:	3c 81       	ldd	r19, Y+4	; 0x04
    268c:	2a 30       	cpi	r18, 0x0A	; 10
    268e:	31 05       	cpc	r19, r1
    2690:	b1 f1       	breq	.+108    	; 0x26fe <KEYPAD_4x4_adjustKeyNumber+0x112>
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	8b 30       	cpi	r24, 0x0B	; 11
    2698:	91 05       	cpc	r25, r1
    269a:	a4 f5       	brge	.+104    	; 0x2704 <KEYPAD_4x4_adjustKeyNumber+0x118>
    269c:	2d c0       	rjmp	.+90     	; 0x26f8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    269e:	2b 81       	ldd	r18, Y+3	; 0x03
    26a0:	3c 81       	ldd	r19, Y+4	; 0x04
    26a2:	2e 30       	cpi	r18, 0x0E	; 14
    26a4:	31 05       	cpc	r19, r1
    26a6:	b9 f1       	breq	.+110    	; 0x2716 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	8e 30       	cpi	r24, 0x0E	; 14
    26ae:	91 05       	cpc	r25, r1
    26b0:	7c f1       	brlt	.+94     	; 0x2710 <KEYPAD_4x4_adjustKeyNumber+0x124>
    26b2:	2b 81       	ldd	r18, Y+3	; 0x03
    26b4:	3c 81       	ldd	r19, Y+4	; 0x04
    26b6:	2f 30       	cpi	r18, 0x0F	; 15
    26b8:	31 05       	cpc	r19, r1
    26ba:	79 f1       	breq	.+94     	; 0x271a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	80 31       	cpi	r24, 0x10	; 16
    26c2:	91 05       	cpc	r25, r1
    26c4:	69 f1       	breq	.+90     	; 0x2720 <KEYPAD_4x4_adjustKeyNumber+0x134>
    26c6:	2f c0       	rjmp	.+94     	; 0x2726 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    26c8:	87 e0       	ldi	r24, 0x07	; 7
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	2e c0       	rjmp	.+92     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    26ce:	88 e0       	ldi	r24, 0x08	; 8
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	2b c0       	rjmp	.+86     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    26d4:	89 e0       	ldi	r24, 0x09	; 9
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	28 c0       	rjmp	.+80     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    26da:	85 e2       	ldi	r24, 0x25	; 37
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	25 c0       	rjmp	.+74     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    26e0:	84 e0       	ldi	r24, 0x04	; 4
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	22 c0       	rjmp	.+68     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    26e6:	85 e0       	ldi	r24, 0x05	; 5
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	1f c0       	rjmp	.+62     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    26ec:	86 e0       	ldi	r24, 0x06	; 6
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	1c c0       	rjmp	.+56     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    26f2:	8a e2       	ldi	r24, 0x2A	; 42
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	19 c0       	rjmp	.+50     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	16 c0       	rjmp	.+44     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	13 c0       	rjmp	.+38     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2704:	83 e0       	ldi	r24, 0x03	; 3
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	10 c0       	rjmp	.+32     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    270a:	8d e2       	ldi	r24, 0x2D	; 45
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	0d c0       	rjmp	.+26     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2710:	8d e0       	ldi	r24, 0x0D	; 13
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	0a c0       	rjmp	.+20     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2716:	19 82       	std	Y+1, r1	; 0x01
    2718:	08 c0       	rjmp	.+16     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    271a:	8d e3       	ldi	r24, 0x3D	; 61
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	05 c0       	rjmp	.+10     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2720:	8b e2       	ldi	r24, 0x2B	; 43
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	02 c0       	rjmp	.+4      	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    272a:	89 81       	ldd	r24, Y+1	; 0x01
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	2e 97       	sbiw	r28, 0x0e	; 14
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	62 e0       	ldi	r22, 0x02	; 2
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <GPIO_setupPinDirection>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 ea       	ldi	r26, 0xA0	; 160
    2768:	b1 e4       	ldi	r27, 0x41	; 65
    276a:	8b 87       	std	Y+11, r24	; 0x0b
    276c:	9c 87       	std	Y+12, r25	; 0x0c
    276e:	ad 87       	std	Y+13, r26	; 0x0d
    2770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a ef       	ldi	r20, 0xFA	; 250
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 83       	std	Y+7, r24	; 0x07
    278c:	98 87       	std	Y+8, r25	; 0x08
    278e:	a9 87       	std	Y+9, r26	; 0x09
    2790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <LCD_init+0x7a>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <LCD_init+0xf8>
	else if (__tmp > 65535)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <LCD_init+0xda>
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_init+0xc8>
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <LCD_init+0xbc>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_init+0x104>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	6f ef       	ldi	r22, 0xFF	; 255
    284a:	0e 94 3f 11 	call	0x227e	; 0x227e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    284e:	88 e3       	ldi	r24, 0x38	; 56
    2850:	0e 94 39 14 	call	0x2872	; 0x2872 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2854:	8c e0       	ldi	r24, 0x0C	; 12
    2856:	0e 94 39 14 	call	0x2872	; 0x2872 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	0e 94 39 14 	call	0x2872	; 0x2872 <LCD_sendCommand>
}
    2860:	2e 96       	adiw	r28, 0x0e	; 14
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	e9 97       	sbiw	r28, 0x39	; 57
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <GPIO_writePin>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a0 e8       	ldi	r26, 0x80	; 128
    2898:	bf e3       	ldi	r27, 0x3F	; 63
    289a:	8d ab       	std	Y+53, r24	; 0x35
    289c:	9e ab       	std	Y+54, r25	; 0x36
    289e:	af ab       	std	Y+55, r26	; 0x37
    28a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a2:	6d a9       	ldd	r22, Y+53	; 0x35
    28a4:	7e a9       	ldd	r23, Y+54	; 0x36
    28a6:	8f a9       	ldd	r24, Y+55	; 0x37
    28a8:	98 ad       	ldd	r25, Y+56	; 0x38
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4a ef       	ldi	r20, 0xFA	; 250
    28b0:	54 e4       	ldi	r21, 0x44	; 68
    28b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	89 ab       	std	Y+49, r24	; 0x31
    28bc:	9a ab       	std	Y+50, r25	; 0x32
    28be:	ab ab       	std	Y+51, r26	; 0x33
    28c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28c2:	69 a9       	ldd	r22, Y+49	; 0x31
    28c4:	7a a9       	ldd	r23, Y+50	; 0x32
    28c6:	8b a9       	ldd	r24, Y+51	; 0x33
    28c8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e8       	ldi	r20, 0x80	; 128
    28d0:	5f e3       	ldi	r21, 0x3F	; 63
    28d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d6:	88 23       	and	r24, r24
    28d8:	2c f4       	brge	.+10     	; 0x28e4 <LCD_sendCommand+0x72>
		__ticks = 1;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	98 ab       	std	Y+48, r25	; 0x30
    28e0:	8f a7       	std	Y+47, r24	; 0x2f
    28e2:	3f c0       	rjmp	.+126    	; 0x2962 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    28e4:	69 a9       	ldd	r22, Y+49	; 0x31
    28e6:	7a a9       	ldd	r23, Y+50	; 0x32
    28e8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ea:	9c a9       	ldd	r25, Y+52	; 0x34
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	3f ef       	ldi	r19, 0xFF	; 255
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	57 e4       	ldi	r21, 0x47	; 71
    28f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	4c f5       	brge	.+82     	; 0x294e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fc:	6d a9       	ldd	r22, Y+53	; 0x35
    28fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2900:	8f a9       	ldd	r24, Y+55	; 0x37
    2902:	98 ad       	ldd	r25, Y+56	; 0x38
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 e2       	ldi	r20, 0x20	; 32
    290a:	51 e4       	ldi	r21, 0x41	; 65
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	98 ab       	std	Y+48, r25	; 0x30
    2922:	8f a7       	std	Y+47, r24	; 0x2f
    2924:	0f c0       	rjmp	.+30     	; 0x2944 <LCD_sendCommand+0xd2>
    2926:	88 ec       	ldi	r24, 0xC8	; 200
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9e a7       	std	Y+46, r25	; 0x2e
    292c:	8d a7       	std	Y+45, r24	; 0x2d
    292e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2930:	9e a5       	ldd	r25, Y+46	; 0x2e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <LCD_sendCommand+0xc0>
    2936:	9e a7       	std	Y+46, r25	; 0x2e
    2938:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293a:	8f a5       	ldd	r24, Y+47	; 0x2f
    293c:	98 a9       	ldd	r25, Y+48	; 0x30
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	98 ab       	std	Y+48, r25	; 0x30
    2942:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2944:	8f a5       	ldd	r24, Y+47	; 0x2f
    2946:	98 a9       	ldd	r25, Y+48	; 0x30
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	69 f7       	brne	.-38     	; 0x2926 <LCD_sendCommand+0xb4>
    294c:	14 c0       	rjmp	.+40     	; 0x2976 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294e:	69 a9       	ldd	r22, Y+49	; 0x31
    2950:	7a a9       	ldd	r23, Y+50	; 0x32
    2952:	8b a9       	ldd	r24, Y+51	; 0x33
    2954:	9c a9       	ldd	r25, Y+52	; 0x34
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	98 ab       	std	Y+48, r25	; 0x30
    2960:	8f a7       	std	Y+47, r24	; 0x2f
    2962:	8f a5       	ldd	r24, Y+47	; 0x2f
    2964:	98 a9       	ldd	r25, Y+48	; 0x30
    2966:	9c a7       	std	Y+44, r25	; 0x2c
    2968:	8b a7       	std	Y+43, r24	; 0x2b
    296a:	8b a5       	ldd	r24, Y+43	; 0x2b
    296c:	9c a5       	ldd	r25, Y+44	; 0x2c
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <LCD_sendCommand+0xfc>
    2972:	9c a7       	std	Y+44, r25	; 0x2c
    2974:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	62 e0       	ldi	r22, 0x02	; 2
    297a:	41 e0       	ldi	r20, 0x01	; 1
    297c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <GPIO_writePin>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a0 e8       	ldi	r26, 0x80	; 128
    2986:	bf e3       	ldi	r27, 0x3F	; 63
    2988:	8f a3       	std	Y+39, r24	; 0x27
    298a:	98 a7       	std	Y+40, r25	; 0x28
    298c:	a9 a7       	std	Y+41, r26	; 0x29
    298e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2990:	6f a1       	ldd	r22, Y+39	; 0x27
    2992:	78 a5       	ldd	r23, Y+40	; 0x28
    2994:	89 a5       	ldd	r24, Y+41	; 0x29
    2996:	9a a5       	ldd	r25, Y+42	; 0x2a
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4a ef       	ldi	r20, 0xFA	; 250
    299e:	54 e4       	ldi	r21, 0x44	; 68
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	8b a3       	std	Y+35, r24	; 0x23
    29aa:	9c a3       	std	Y+36, r25	; 0x24
    29ac:	ad a3       	std	Y+37, r26	; 0x25
    29ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29b0:	6b a1       	ldd	r22, Y+35	; 0x23
    29b2:	7c a1       	ldd	r23, Y+36	; 0x24
    29b4:	8d a1       	ldd	r24, Y+37	; 0x25
    29b6:	9e a1       	ldd	r25, Y+38	; 0x26
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e8       	ldi	r20, 0x80	; 128
    29be:	5f e3       	ldi	r21, 0x3F	; 63
    29c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c4:	88 23       	and	r24, r24
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <LCD_sendCommand+0x160>
		__ticks = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9a a3       	std	Y+34, r25	; 0x22
    29ce:	89 a3       	std	Y+33, r24	; 0x21
    29d0:	3f c0       	rjmp	.+126    	; 0x2a50 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    29d2:	6b a1       	ldd	r22, Y+35	; 0x23
    29d4:	7c a1       	ldd	r23, Y+36	; 0x24
    29d6:	8d a1       	ldd	r24, Y+37	; 0x25
    29d8:	9e a1       	ldd	r25, Y+38	; 0x26
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	3f ef       	ldi	r19, 0xFF	; 255
    29de:	4f e7       	ldi	r20, 0x7F	; 127
    29e0:	57 e4       	ldi	r21, 0x47	; 71
    29e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e6:	18 16       	cp	r1, r24
    29e8:	4c f5       	brge	.+82     	; 0x2a3c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ea:	6f a1       	ldd	r22, Y+39	; 0x27
    29ec:	78 a5       	ldd	r23, Y+40	; 0x28
    29ee:	89 a5       	ldd	r24, Y+41	; 0x29
    29f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	51 e4       	ldi	r21, 0x41	; 65
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9a a3       	std	Y+34, r25	; 0x22
    2a10:	89 a3       	std	Y+33, r24	; 0x21
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <LCD_sendCommand+0x1c0>
    2a14:	88 ec       	ldi	r24, 0xC8	; 200
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	98 a3       	std	Y+32, r25	; 0x20
    2a1a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_sendCommand+0x1ae>
    2a24:	98 a3       	std	Y+32, r25	; 0x20
    2a26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	9a a3       	std	Y+34, r25	; 0x22
    2a30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	89 a1       	ldd	r24, Y+33	; 0x21
    2a34:	9a a1       	ldd	r25, Y+34	; 0x22
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <LCD_sendCommand+0x1a2>
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a40:	8d a1       	ldd	r24, Y+37	; 0x25
    2a42:	9e a1       	ldd	r25, Y+38	; 0x26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
    2a50:	89 a1       	ldd	r24, Y+33	; 0x21
    2a52:	9a a1       	ldd	r25, Y+34	; 0x22
    2a54:	9e 8f       	std	Y+30, r25	; 0x1e
    2a56:	8d 8f       	std	Y+29, r24	; 0x1d
    2a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <LCD_sendCommand+0x1ea>
    2a60:	9e 8f       	std	Y+30, r25	; 0x1e
    2a62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	69 ad       	ldd	r22, Y+57	; 0x39
    2a68:	0e 94 83 11 	call	0x2306	; 0x2306 <GPIO_writePort>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a0 e8       	ldi	r26, 0x80	; 128
    2a72:	bf e3       	ldi	r27, 0x3F	; 63
    2a74:	89 8f       	std	Y+25, r24	; 0x19
    2a76:	9a 8f       	std	Y+26, r25	; 0x1a
    2a78:	ab 8f       	std	Y+27, r26	; 0x1b
    2a7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a ef       	ldi	r20, 0xFA	; 250
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8d 8b       	std	Y+21, r24	; 0x15
    2a96:	9e 8b       	std	Y+22, r25	; 0x16
    2a98:	af 8b       	std	Y+23, r26	; 0x17
    2a9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <LCD_sendCommand+0x24c>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9c 8b       	std	Y+20, r25	; 0x14
    2aba:	8b 8b       	std	Y+19, r24	; 0x13
    2abc:	3f c0       	rjmp	.+126    	; 0x2b3c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2abe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	4c f5       	brge	.+82     	; 0x2b28 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9c 8b       	std	Y+20, r25	; 0x14
    2afc:	8b 8b       	std	Y+19, r24	; 0x13
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <LCD_sendCommand+0x2ac>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	9a 8b       	std	Y+18, r25	; 0x12
    2b06:	89 8b       	std	Y+17, r24	; 0x11
    2b08:	89 89       	ldd	r24, Y+17	; 0x11
    2b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_sendCommand+0x29a>
    2b10:	9a 8b       	std	Y+18, r25	; 0x12
    2b12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	8b 89       	ldd	r24, Y+19	; 0x13
    2b16:	9c 89       	ldd	r25, Y+20	; 0x14
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b20:	9c 89       	ldd	r25, Y+20	; 0x14
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <LCD_sendCommand+0x28e>
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b28:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9c 8b       	std	Y+20, r25	; 0x14
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b40:	98 8b       	std	Y+16, r25	; 0x10
    2b42:	8f 87       	std	Y+15, r24	; 0x0f
    2b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b46:	98 89       	ldd	r25, Y+16	; 0x10
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_sendCommand+0x2d6>
    2b4c:	98 8b       	std	Y+16, r25	; 0x10
    2b4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	62 e0       	ldi	r22, 0x02	; 2
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <GPIO_writePin>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a0 e8       	ldi	r26, 0x80	; 128
    2b60:	bf e3       	ldi	r27, 0x3F	; 63
    2b62:	8b 87       	std	Y+11, r24	; 0x0b
    2b64:	9c 87       	std	Y+12, r25	; 0x0c
    2b66:	ad 87       	std	Y+13, r26	; 0x0d
    2b68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4a ef       	ldi	r20, 0xFA	; 250
    2b78:	54 e4       	ldi	r21, 0x44	; 68
    2b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	8f 83       	std	Y+7, r24	; 0x07
    2b84:	98 87       	std	Y+8, r25	; 0x08
    2b86:	a9 87       	std	Y+9, r26	; 0x09
    2b88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	78 85       	ldd	r23, Y+8	; 0x08
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5f e3       	ldi	r21, 0x3F	; 63
    2b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <LCD_sendCommand+0x33a>
		__ticks = 1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	3f c0       	rjmp	.+126    	; 0x2c2a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2bac:	6f 81       	ldd	r22, Y+7	; 0x07
    2bae:	78 85       	ldd	r23, Y+8	; 0x08
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	3f ef       	ldi	r19, 0xFF	; 255
    2bb8:	4f e7       	ldi	r20, 0x7F	; 127
    2bba:	57 e4       	ldi	r21, 0x47	; 71
    2bbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc0:	18 16       	cp	r1, r24
    2bc2:	4c f5       	brge	.+82     	; 0x2c16 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e2       	ldi	r20, 0x20	; 32
    2bd2:	51 e4       	ldi	r21, 0x41	; 65
    2bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9e 83       	std	Y+6, r25	; 0x06
    2bea:	8d 83       	std	Y+5, r24	; 0x05
    2bec:	0f c0       	rjmp	.+30     	; 0x2c0c <LCD_sendCommand+0x39a>
    2bee:	88 ec       	ldi	r24, 0xC8	; 200
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9c 83       	std	Y+4, r25	; 0x04
    2bf4:	8b 83       	std	Y+3, r24	; 0x03
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <LCD_sendCommand+0x388>
    2bfe:	9c 83       	std	Y+4, r25	; 0x04
    2c00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c02:	8d 81       	ldd	r24, Y+5	; 0x05
    2c04:	9e 81       	ldd	r25, Y+6	; 0x06
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	69 f7       	brne	.-38     	; 0x2bee <LCD_sendCommand+0x37c>
    2c14:	14 c0       	rjmp	.+40     	; 0x2c3e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c16:	6f 81       	ldd	r22, Y+7	; 0x07
    2c18:	78 85       	ldd	r23, Y+8	; 0x08
    2c1a:	89 85       	ldd	r24, Y+9	; 0x09
    2c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2e:	9a 83       	std	Y+2, r25	; 0x02
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <LCD_sendCommand+0x3c4>
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c3e:	e9 96       	adiw	r28, 0x39	; 57
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	e9 97       	sbiw	r28, 0x39	; 57
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <GPIO_writePin>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a0 e8       	ldi	r26, 0x80	; 128
    2c76:	bf e3       	ldi	r27, 0x3F	; 63
    2c78:	8d ab       	std	Y+53, r24	; 0x35
    2c7a:	9e ab       	std	Y+54, r25	; 0x36
    2c7c:	af ab       	std	Y+55, r26	; 0x37
    2c7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c80:	6d a9       	ldd	r22, Y+53	; 0x35
    2c82:	7e a9       	ldd	r23, Y+54	; 0x36
    2c84:	8f a9       	ldd	r24, Y+55	; 0x37
    2c86:	98 ad       	ldd	r25, Y+56	; 0x38
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a ef       	ldi	r20, 0xFA	; 250
    2c8e:	54 e4       	ldi	r21, 0x44	; 68
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	89 ab       	std	Y+49, r24	; 0x31
    2c9a:	9a ab       	std	Y+50, r25	; 0x32
    2c9c:	ab ab       	std	Y+51, r26	; 0x33
    2c9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	2c f4       	brge	.+10     	; 0x2cc2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	98 ab       	std	Y+48, r25	; 0x30
    2cbe:	8f a7       	std	Y+47, r24	; 0x2f
    2cc0:	3f c0       	rjmp	.+126    	; 0x2d40 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2cc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2cc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	4c f5       	brge	.+82     	; 0x2d2c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cda:	6d a9       	ldd	r22, Y+53	; 0x35
    2cdc:	7e a9       	ldd	r23, Y+54	; 0x36
    2cde:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	98 ab       	std	Y+48, r25	; 0x30
    2d00:	8f a7       	std	Y+47, r24	; 0x2f
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <LCD_displayCharacter+0xd2>
    2d04:	88 ec       	ldi	r24, 0xC8	; 200
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9e a7       	std	Y+46, r25	; 0x2e
    2d0a:	8d a7       	std	Y+45, r24	; 0x2d
    2d0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <LCD_displayCharacter+0xc0>
    2d14:	9e a7       	std	Y+46, r25	; 0x2e
    2d16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	98 ab       	std	Y+48, r25	; 0x30
    2d20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d24:	98 a9       	ldd	r25, Y+48	; 0x30
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	69 f7       	brne	.-38     	; 0x2d04 <LCD_displayCharacter+0xb4>
    2d2a:	14 c0       	rjmp	.+40     	; 0x2d54 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d30:	8b a9       	ldd	r24, Y+51	; 0x33
    2d32:	9c a9       	ldd	r25, Y+52	; 0x34
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	98 ab       	std	Y+48, r25	; 0x30
    2d3e:	8f a7       	std	Y+47, r24	; 0x2f
    2d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d42:	98 a9       	ldd	r25, Y+48	; 0x30
    2d44:	9c a7       	std	Y+44, r25	; 0x2c
    2d46:	8b a7       	std	Y+43, r24	; 0x2b
    2d48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <LCD_displayCharacter+0xfc>
    2d50:	9c a7       	std	Y+44, r25	; 0x2c
    2d52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	62 e0       	ldi	r22, 0x02	; 2
    2d58:	41 e0       	ldi	r20, 0x01	; 1
    2d5a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <GPIO_writePin>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a0 e8       	ldi	r26, 0x80	; 128
    2d64:	bf e3       	ldi	r27, 0x3F	; 63
    2d66:	8f a3       	std	Y+39, r24	; 0x27
    2d68:	98 a7       	std	Y+40, r25	; 0x28
    2d6a:	a9 a7       	std	Y+41, r26	; 0x29
    2d6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d70:	78 a5       	ldd	r23, Y+40	; 0x28
    2d72:	89 a5       	ldd	r24, Y+41	; 0x29
    2d74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a ef       	ldi	r20, 0xFA	; 250
    2d7c:	54 e4       	ldi	r21, 0x44	; 68
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	8b a3       	std	Y+35, r24	; 0x23
    2d88:	9c a3       	std	Y+36, r25	; 0x24
    2d8a:	ad a3       	std	Y+37, r26	; 0x25
    2d8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d90:	7c a1       	ldd	r23, Y+36	; 0x24
    2d92:	8d a1       	ldd	r24, Y+37	; 0x25
    2d94:	9e a1       	ldd	r25, Y+38	; 0x26
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2db0:	6b a1       	ldd	r22, Y+35	; 0x23
    2db2:	7c a1       	ldd	r23, Y+36	; 0x24
    2db4:	8d a1       	ldd	r24, Y+37	; 0x25
    2db6:	9e a1       	ldd	r25, Y+38	; 0x26
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dca:	78 a5       	ldd	r23, Y+40	; 0x28
    2dcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2dce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9a a3       	std	Y+34, r25	; 0x22
    2dee:	89 a3       	std	Y+33, r24	; 0x21
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <LCD_displayCharacter+0x1c0>
    2df2:	88 ec       	ldi	r24, 0xC8	; 200
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	98 a3       	std	Y+32, r25	; 0x20
    2df8:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dfc:	98 a1       	ldd	r25, Y+32	; 0x20
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_displayCharacter+0x1ae>
    2e02:	98 a3       	std	Y+32, r25	; 0x20
    2e04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	89 a1       	ldd	r24, Y+33	; 0x21
    2e08:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9a a3       	std	Y+34, r25	; 0x22
    2e0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	89 a1       	ldd	r24, Y+33	; 0x21
    2e12:	9a a1       	ldd	r25, Y+34	; 0x22
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <LCD_displayCharacter+0x1a2>
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e20:	9e a1       	ldd	r25, Y+38	; 0x26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9a a3       	std	Y+34, r25	; 0x22
    2e2c:	89 a3       	std	Y+33, r24	; 0x21
    2e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e30:	9a a1       	ldd	r25, Y+34	; 0x22
    2e32:	9e 8f       	std	Y+30, r25	; 0x1e
    2e34:	8d 8f       	std	Y+29, r24	; 0x1d
    2e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <LCD_displayCharacter+0x1ea>
    2e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e40:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	69 ad       	ldd	r22, Y+57	; 0x39
    2e46:	0e 94 83 11 	call	0x2306	; 0x2306 <GPIO_writePort>
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	a0 e8       	ldi	r26, 0x80	; 128
    2e50:	bf e3       	ldi	r27, 0x3F	; 63
    2e52:	89 8f       	std	Y+25, r24	; 0x19
    2e54:	9a 8f       	std	Y+26, r25	; 0x1a
    2e56:	ab 8f       	std	Y+27, r26	; 0x1b
    2e58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a ef       	ldi	r20, 0xFA	; 250
    2e68:	54 e4       	ldi	r21, 0x44	; 68
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8d 8b       	std	Y+21, r24	; 0x15
    2e74:	9e 8b       	std	Y+22, r25	; 0x16
    2e76:	af 8b       	std	Y+23, r26	; 0x17
    2e78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e80:	98 8d       	ldd	r25, Y+24	; 0x18
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	2c f4       	brge	.+10     	; 0x2e9c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c 8b       	std	Y+20, r25	; 0x14
    2e98:	8b 8b       	std	Y+19, r24	; 0x13
    2e9a:	3f c0       	rjmp	.+126    	; 0x2f1a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	3f ef       	ldi	r19, 0xFF	; 255
    2ea8:	4f e7       	ldi	r20, 0x7F	; 127
    2eaa:	57 e4       	ldi	r21, 0x47	; 71
    2eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb0:	18 16       	cp	r1, r24
    2eb2:	4c f5       	brge	.+82     	; 0x2f06 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2eb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e2       	ldi	r20, 0x20	; 32
    2ec2:	51 e4       	ldi	r21, 0x41	; 65
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9c 8b       	std	Y+20, r25	; 0x14
    2eda:	8b 8b       	std	Y+19, r24	; 0x13
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <LCD_displayCharacter+0x2ac>
    2ede:	88 ec       	ldi	r24, 0xC8	; 200
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	9a 8b       	std	Y+18, r25	; 0x12
    2ee4:	89 8b       	std	Y+17, r24	; 0x11
    2ee6:	89 89       	ldd	r24, Y+17	; 0x11
    2ee8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <LCD_displayCharacter+0x29a>
    2eee:	9a 8b       	std	Y+18, r25	; 0x12
    2ef0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	9c 8b       	std	Y+20, r25	; 0x14
    2efa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efc:	8b 89       	ldd	r24, Y+19	; 0x13
    2efe:	9c 89       	ldd	r25, Y+20	; 0x14
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	69 f7       	brne	.-38     	; 0x2ede <LCD_displayCharacter+0x28e>
    2f04:	14 c0       	rjmp	.+40     	; 0x2f2e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f06:	6d 89       	ldd	r22, Y+21	; 0x15
    2f08:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9c 8b       	std	Y+20, r25	; 0x14
    2f18:	8b 8b       	std	Y+19, r24	; 0x13
    2f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1e:	98 8b       	std	Y+16, r25	; 0x10
    2f20:	8f 87       	std	Y+15, r24	; 0x0f
    2f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f24:	98 89       	ldd	r25, Y+16	; 0x10
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <LCD_displayCharacter+0x2d6>
    2f2a:	98 8b       	std	Y+16, r25	; 0x10
    2f2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <GPIO_writePin>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e8       	ldi	r26, 0x80	; 128
    2f3e:	bf e3       	ldi	r27, 0x3F	; 63
    2f40:	8b 87       	std	Y+11, r24	; 0x0b
    2f42:	9c 87       	std	Y+12, r25	; 0x0c
    2f44:	ad 87       	std	Y+13, r26	; 0x0d
    2f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a ef       	ldi	r20, 0xFA	; 250
    2f56:	54 e4       	ldi	r21, 0x44	; 68
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	8f 83       	std	Y+7, r24	; 0x07
    2f62:	98 87       	std	Y+8, r25	; 0x08
    2f64:	a9 87       	std	Y+9, r26	; 0x09
    2f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f68:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6a:	78 85       	ldd	r23, Y+8	; 0x08
    2f6c:	89 85       	ldd	r24, Y+9	; 0x09
    2f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9e 83       	std	Y+6, r25	; 0x06
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8c:	78 85       	ldd	r23, Y+8	; 0x08
    2f8e:	89 85       	ldd	r24, Y+9	; 0x09
    2f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <LCD_displayCharacter+0x39a>
    2fcc:	88 ec       	ldi	r24, 0xC8	; 200
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_displayCharacter+0x388>
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <LCD_displayCharacter+0x37c>
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff6:	78 85       	ldd	r23, Y+8	; 0x08
    2ff8:	89 85       	ldd	r24, Y+9	; 0x09
    2ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9e 83       	std	Y+6, r25	; 0x06
    3006:	8d 83       	std	Y+5, r24	; 0x05
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <LCD_displayCharacter+0x3c4>
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    301c:	e9 96       	adiw	r28, 0x39	; 57
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	00 d0       	rcall	.+0      	; 0x3034 <LCD_displayString+0x6>
    3034:	0f 92       	push	r0
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	9b 83       	std	Y+3, r25	; 0x03
    303c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    303e:	19 82       	std	Y+1, r1	; 0x01
    3040:	0e c0       	rjmp	.+28     	; 0x305e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	9b 81       	ldd	r25, Y+3	; 0x03
    304c:	fc 01       	movw	r30, r24
    304e:	e2 0f       	add	r30, r18
    3050:	f3 1f       	adc	r31, r19
    3052:	80 81       	ld	r24, Z
    3054:	0e 94 28 16 	call	0x2c50	; 0x2c50 <LCD_displayCharacter>
		i++;
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	fc 01       	movw	r30, r24
    306a:	e2 0f       	add	r30, r18
    306c:	f3 1f       	adc	r31, r19
    306e:	80 81       	ld	r24, Z
    3070:	88 23       	and	r24, r24
    3072:	39 f7       	brne	.-50     	; 0x3042 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <LCD_moveCursor+0x6>
    3086:	00 d0       	rcall	.+0      	; 0x3088 <LCD_moveCursor+0x8>
    3088:	0f 92       	push	r0
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	3d 83       	std	Y+5, r19	; 0x05
    309a:	2c 83       	std	Y+4, r18	; 0x04
    309c:	8c 81       	ldd	r24, Y+4	; 0x04
    309e:	9d 81       	ldd	r25, Y+5	; 0x05
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	91 05       	cpc	r25, r1
    30a4:	c1 f0       	breq	.+48     	; 0x30d6 <LCD_moveCursor+0x56>
    30a6:	2c 81       	ldd	r18, Y+4	; 0x04
    30a8:	3d 81       	ldd	r19, Y+5	; 0x05
    30aa:	22 30       	cpi	r18, 0x02	; 2
    30ac:	31 05       	cpc	r19, r1
    30ae:	2c f4       	brge	.+10     	; 0x30ba <LCD_moveCursor+0x3a>
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	9d 81       	ldd	r25, Y+5	; 0x05
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	61 f0       	breq	.+24     	; 0x30d0 <LCD_moveCursor+0x50>
    30b8:	19 c0       	rjmp	.+50     	; 0x30ec <LCD_moveCursor+0x6c>
    30ba:	2c 81       	ldd	r18, Y+4	; 0x04
    30bc:	3d 81       	ldd	r19, Y+5	; 0x05
    30be:	22 30       	cpi	r18, 0x02	; 2
    30c0:	31 05       	cpc	r19, r1
    30c2:	69 f0       	breq	.+26     	; 0x30de <LCD_moveCursor+0x5e>
    30c4:	8c 81       	ldd	r24, Y+4	; 0x04
    30c6:	9d 81       	ldd	r25, Y+5	; 0x05
    30c8:	83 30       	cpi	r24, 0x03	; 3
    30ca:	91 05       	cpc	r25, r1
    30cc:	61 f0       	breq	.+24     	; 0x30e6 <LCD_moveCursor+0x66>
    30ce:	0e c0       	rjmp	.+28     	; 0x30ec <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	0b c0       	rjmp	.+22     	; 0x30ec <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	80 5c       	subi	r24, 0xC0	; 192
    30da:	89 83       	std	Y+1, r24	; 0x01
    30dc:	07 c0       	rjmp	.+14     	; 0x30ec <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	80 5f       	subi	r24, 0xF0	; 240
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	03 c0       	rjmp	.+6      	; 0x30ec <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	80 5b       	subi	r24, 0xB0	; 176
    30ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	80 68       	ori	r24, 0x80	; 128
    30f0:	0e 94 39 14 	call	0x2872	; 0x2872 <LCD_sendCommand>
}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	00 d0       	rcall	.+0      	; 0x310a <LCD_displayStringRowColumn+0x6>
    310a:	00 d0       	rcall	.+0      	; 0x310c <LCD_displayStringRowColumn+0x8>
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	6a 83       	std	Y+2, r22	; 0x02
    3114:	5c 83       	std	Y+4, r21	; 0x04
    3116:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	6a 81       	ldd	r22, Y+2	; 0x02
    311c:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
}
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	cf 91       	pop	r28
    3132:	df 91       	pop	r29
    3134:	08 95       	ret

00003136 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	62 97       	sbiw	r28, 0x12	; 18
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	9a 8b       	std	Y+18, r25	; 0x12
    314c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    314e:	89 89       	ldd	r24, Y+17	; 0x11
    3150:	9a 89       	ldd	r25, Y+18	; 0x12
    3152:	9e 01       	movw	r18, r28
    3154:	2f 5f       	subi	r18, 0xFF	; 255
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	b9 01       	movw	r22, r18
    315a:	4a e0       	ldi	r20, 0x0A	; 10
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	0e 94 9e 1b 	call	0x373c	; 0x373c <itoa>
   LCD_displayString(buff); /* Display the string */
    3162:	ce 01       	movw	r24, r28
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
}
    316a:	62 96       	adiw	r28, 0x12	; 18
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	0e 94 39 14 	call	0x2872	; 0x2872 <LCD_sendCommand>
}
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <__vector_7>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
#ifdef TIMER1_COMPARE
#if(CTC_CHANNEL == A)
ISR(TIMER1_COMPA_vect)
{
    3190:	1f 92       	push	r1
    3192:	0f 92       	push	r0
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	0f 92       	push	r0
    3198:	11 24       	eor	r1, r1
    319a:	2f 93       	push	r18
    319c:	3f 93       	push	r19
    319e:	4f 93       	push	r20
    31a0:	5f 93       	push	r21
    31a2:	6f 93       	push	r22
    31a4:	7f 93       	push	r23
    31a6:	8f 93       	push	r24
    31a8:	9f 93       	push	r25
    31aa:	af 93       	push	r26
    31ac:	bf 93       	push	r27
    31ae:	ef 93       	push	r30
    31b0:	ff 93       	push	r31
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    31ba:	80 91 59 01 	lds	r24, 0x0159
    31be:	90 91 5a 01 	lds	r25, 0x015A
    31c2:	00 97       	sbiw	r24, 0x00	; 0
    31c4:	29 f0       	breq	.+10     	; 0x31d0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    31c6:	e0 91 59 01 	lds	r30, 0x0159
    31ca:	f0 91 5a 01 	lds	r31, 0x015A
    31ce:	09 95       	icall
	}
}
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	ff 91       	pop	r31
    31d6:	ef 91       	pop	r30
    31d8:	bf 91       	pop	r27
    31da:	af 91       	pop	r26
    31dc:	9f 91       	pop	r25
    31de:	8f 91       	pop	r24
    31e0:	7f 91       	pop	r23
    31e2:	6f 91       	pop	r22
    31e4:	5f 91       	pop	r21
    31e6:	4f 91       	pop	r20
    31e8:	3f 91       	pop	r19
    31ea:	2f 91       	pop	r18
    31ec:	0f 90       	pop	r0
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	0f 90       	pop	r0
    31f2:	1f 90       	pop	r1
    31f4:	18 95       	reti

000031f6 <Timer1_init>:
  	  ⮚ Function to initialize the Timer driver
● Inputs: pointer to the configuration structure with type Timer1_ConfigType.
● Return: None
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <Timer1_init+0x6>
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
	/* 1. Set timer1 initial count */
	TCNT1_REG.TwoBytes = Config_Ptr->initial_value;
    3204:	ac e4       	ldi	r26, 0x4C	; 76
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	e9 81       	ldd	r30, Y+1	; 0x01
    320a:	fa 81       	ldd	r31, Y+2	; 0x02
    320c:	80 81       	ld	r24, Z
    320e:	91 81       	ldd	r25, Z+1	; 0x01
    3210:	11 96       	adiw	r26, 0x01	; 1
    3212:	9c 93       	st	X, r25
    3214:	8e 93       	st	-X, r24

	/* 2. Non PWM mode FOC1A=1 and FOC1B=1 */
	TCCR1A_REG.Bits.FOC1A_Bit = 1;
    3216:	ef e4       	ldi	r30, 0x4F	; 79
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	84 60       	ori	r24, 0x04	; 4
    321e:	80 83       	st	Z, r24
	TCCR1A_REG.Bits.FOC1B_Bit = 1;
    3220:	ef e4       	ldi	r30, 0x4F	; 79
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	88 60       	ori	r24, 0x08	; 8
    3228:	80 83       	st	Z, r24

	/* 3. Set the mode using WGM10 [TCCR1A] , WGM11 [TCCR1A], WGM12[TCCR1B] */
	TCCR1A_REG.Bits.WGM10_Bit =  ((Config_Ptr->mode) & 0x01);
    322a:	af e4       	ldi	r26, 0x4F	; 79
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e9 81       	ldd	r30, Y+1	; 0x01
    3230:	fa 81       	ldd	r31, Y+2	; 0x02
    3232:	85 81       	ldd	r24, Z+5	; 0x05
    3234:	81 70       	andi	r24, 0x01	; 1
    3236:	81 70       	andi	r24, 0x01	; 1
    3238:	81 70       	andi	r24, 0x01	; 1
    323a:	98 2f       	mov	r25, r24
    323c:	91 70       	andi	r25, 0x01	; 1
    323e:	8c 91       	ld	r24, X
    3240:	8e 7f       	andi	r24, 0xFE	; 254
    3242:	89 2b       	or	r24, r25
    3244:	8c 93       	st	X, r24
	TCCR1A_REG.Bits.WGM11_Bit =  (((Config_Ptr->mode) & 0x02) >> 1);
    3246:	af e4       	ldi	r26, 0x4F	; 79
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	e9 81       	ldd	r30, Y+1	; 0x01
    324c:	fa 81       	ldd	r31, Y+2	; 0x02
    324e:	85 81       	ldd	r24, Z+5	; 0x05
    3250:	88 2f       	mov	r24, r24
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	82 70       	andi	r24, 0x02	; 2
    3256:	90 70       	andi	r25, 0x00	; 0
    3258:	95 95       	asr	r25
    325a:	87 95       	ror	r24
    325c:	81 70       	andi	r24, 0x01	; 1
    325e:	81 70       	andi	r24, 0x01	; 1
    3260:	98 2f       	mov	r25, r24
    3262:	99 0f       	add	r25, r25
    3264:	8c 91       	ld	r24, X
    3266:	8d 7f       	andi	r24, 0xFD	; 253
    3268:	89 2b       	or	r24, r25
    326a:	8c 93       	st	X, r24
	TCCR1B_REG.Bits.WGM12_Bit =  (((Config_Ptr->mode) & 0x04) >> 2);
    326c:	ae e4       	ldi	r26, 0x4E	; 78
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e9 81       	ldd	r30, Y+1	; 0x01
    3272:	fa 81       	ldd	r31, Y+2	; 0x02
    3274:	85 81       	ldd	r24, Z+5	; 0x05
    3276:	88 2f       	mov	r24, r24
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	84 70       	andi	r24, 0x04	; 4
    327c:	90 70       	andi	r25, 0x00	; 0
    327e:	95 95       	asr	r25
    3280:	87 95       	ror	r24
    3282:	95 95       	asr	r25
    3284:	87 95       	ror	r24
    3286:	81 70       	andi	r24, 0x01	; 1
    3288:	81 70       	andi	r24, 0x01	; 1
    328a:	98 2f       	mov	r25, r24
    328c:	99 0f       	add	r25, r25
    328e:	99 0f       	add	r25, r25
    3290:	99 0f       	add	r25, r25
    3292:	8c 91       	ld	r24, X
    3294:	87 7f       	andi	r24, 0xF7	; 247
    3296:	89 2b       	or	r24, r25
    3298:	8c 93       	st	X, r24

	/* 4. set the Pre-Scalar*/
	TCCR1B_REG.Bits.CS10_Bit = ((Config_Ptr->prescaler) & 0x01);
    329a:	ae e4       	ldi	r26, 0x4E	; 78
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	e9 81       	ldd	r30, Y+1	; 0x01
    32a0:	fa 81       	ldd	r31, Y+2	; 0x02
    32a2:	84 81       	ldd	r24, Z+4	; 0x04
    32a4:	81 70       	andi	r24, 0x01	; 1
    32a6:	81 70       	andi	r24, 0x01	; 1
    32a8:	81 70       	andi	r24, 0x01	; 1
    32aa:	98 2f       	mov	r25, r24
    32ac:	91 70       	andi	r25, 0x01	; 1
    32ae:	8c 91       	ld	r24, X
    32b0:	8e 7f       	andi	r24, 0xFE	; 254
    32b2:	89 2b       	or	r24, r25
    32b4:	8c 93       	st	X, r24
	TCCR1B_REG.Bits.CS11_Bit =  (((Config_Ptr->prescaler) & 0x02) >> 1);
    32b6:	ae e4       	ldi	r26, 0x4E	; 78
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	e9 81       	ldd	r30, Y+1	; 0x01
    32bc:	fa 81       	ldd	r31, Y+2	; 0x02
    32be:	84 81       	ldd	r24, Z+4	; 0x04
    32c0:	88 2f       	mov	r24, r24
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	82 70       	andi	r24, 0x02	; 2
    32c6:	90 70       	andi	r25, 0x00	; 0
    32c8:	95 95       	asr	r25
    32ca:	87 95       	ror	r24
    32cc:	81 70       	andi	r24, 0x01	; 1
    32ce:	81 70       	andi	r24, 0x01	; 1
    32d0:	98 2f       	mov	r25, r24
    32d2:	99 0f       	add	r25, r25
    32d4:	8c 91       	ld	r24, X
    32d6:	8d 7f       	andi	r24, 0xFD	; 253
    32d8:	89 2b       	or	r24, r25
    32da:	8c 93       	st	X, r24
	TCCR1B_REG.Bits.CS12_Bit =  (((Config_Ptr->prescaler) & 0x04) >> 2);
    32dc:	ae e4       	ldi	r26, 0x4E	; 78
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e9 81       	ldd	r30, Y+1	; 0x01
    32e2:	fa 81       	ldd	r31, Y+2	; 0x02
    32e4:	84 81       	ldd	r24, Z+4	; 0x04
    32e6:	88 2f       	mov	r24, r24
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	84 70       	andi	r24, 0x04	; 4
    32ec:	90 70       	andi	r25, 0x00	; 0
    32ee:	95 95       	asr	r25
    32f0:	87 95       	ror	r24
    32f2:	95 95       	asr	r25
    32f4:	87 95       	ror	r24
    32f6:	81 70       	andi	r24, 0x01	; 1
    32f8:	81 70       	andi	r24, 0x01	; 1
    32fa:	98 2f       	mov	r25, r24
    32fc:	99 0f       	add	r25, r25
    32fe:	99 0f       	add	r25, r25
    3300:	8c 91       	ld	r24, X
    3302:	8b 7f       	andi	r24, 0xFB	; 251
    3304:	89 2b       	or	r24, r25
    3306:	8c 93       	st	X, r24
#endif

#ifdef TIMER1_COMPARE
#if (CTC_CHANNEL == A)
	/* 1. Set the Compare value in channel A if we using compare mode */
	OCR1A_REG.TwoBytes = Config_Ptr->compare_value;
    3308:	aa e4       	ldi	r26, 0x4A	; 74
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	e9 81       	ldd	r30, Y+1	; 0x01
    330e:	fa 81       	ldd	r31, Y+2	; 0x02
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	11 96       	adiw	r26, 0x01	; 1
    3316:	9c 93       	st	X, r25
    3318:	8e 93       	st	-X, r24
	/* 2. enable compare interrupt enable*/
	TIMSK_REG.Bits.OCIE1A_Bit= 1;
    331a:	e9 e5       	ldi	r30, 0x59	; 89
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	80 61       	ori	r24, 0x10	; 16
    3322:	80 83       	st	Z, r24
	OCR1B_REG.TwoBytes = Config_Ptr->compare_value;
	/* 2. enable compare interrupt enable*/
	TIMSK_REG.Bits.OCIE1B_Bit= 1;
#endif
#endif
}
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <Timer1_deInit>:
	⮚ Function to disable the Timer1.
● Inputs: None
● Return: None
 */
void Timer1_deInit(void)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer1 Registers */
	TCCR1A_REG.Byte = 0;
    3336:	ef e4       	ldi	r30, 0x4F	; 79
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    333c:	ee e4       	ldi	r30, 0x4E	; 78
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	10 82       	st	Z, r1
}
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	08 95       	ret

00003348 <Timer1_setCallBack>:
● Inputs: pointer to Call Back function.
● Return: None
 */

void Timer1_setCallBack(void(*a_ptr)(void))
{
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	00 d0       	rcall	.+0      	; 0x334e <Timer1_setCallBack+0x6>
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	9a 83       	std	Y+2, r25	; 0x02
    3354:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	9a 81       	ldd	r25, Y+2	; 0x02
    335a:	90 93 5a 01 	sts	0x015A, r25
    335e:	80 93 59 01 	sts	0x0159, r24
}
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	00 d0       	rcall	.+0      	; 0x3372 <UART_init+0x6>
    3372:	00 d0       	rcall	.+0      	; 0x3374 <UART_init+0x8>
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	9c 83       	std	Y+4, r25	; 0x04
    337a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    337c:	1a 82       	std	Y+2, r1	; 0x02
    337e:	19 82       	std	Y+1, r1	; 0x01

	/************************** UCSRA Description ***************************/
	/* set the speed mode to the register whether it is normal or double speed */
	UART_UCSRA_REG.Bits.U2X_Bit = Config_Ptr->speed_mode;
    3380:	ab e2       	ldi	r26, 0x2B	; 43
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	eb 81       	ldd	r30, Y+3	; 0x03
    3386:	fc 81       	ldd	r31, Y+4	; 0x04
    3388:	80 85       	ldd	r24, Z+8	; 0x08
    338a:	81 70       	andi	r24, 0x01	; 1
    338c:	81 70       	andi	r24, 0x01	; 1
    338e:	98 2f       	mov	r25, r24
    3390:	99 0f       	add	r25, r25
    3392:	8c 91       	ld	r24, X
    3394:	8d 7f       	andi	r24, 0xFD	; 253
    3396:	89 2b       	or	r24, r25
    3398:	8c 93       	st	X, r24


	/************************** UCSRB Description ***************************/
	/* Enable Transmitter & receiver*/
	UART_UCSRB_REG.Bits.RXEN_Bit = 1;
    339a:	ea e2       	ldi	r30, 0x2A	; 42
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	80 61       	ori	r24, 0x10	; 16
    33a2:	80 83       	st	Z, r24
	UART_UCSRB_REG.Bits.TXEN_Bit = 1;
    33a4:	ea e2       	ldi	r30, 0x2A	; 42
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	88 60       	ori	r24, 0x08	; 8
    33ac:	80 83       	st	Z, r24

	/* Set the third bits of the character size into the register UCSRC [UCSZ2] */
	UART_UCSRB_REG.Bits.UCSZ2_Bit = (((Config_Ptr->bit_data) & 0x04) >> 2);
    33ae:	aa e2       	ldi	r26, 0x2A	; 42
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	eb 81       	ldd	r30, Y+3	; 0x03
    33b4:	fc 81       	ldd	r31, Y+4	; 0x04
    33b6:	80 81       	ld	r24, Z
    33b8:	88 2f       	mov	r24, r24
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	84 70       	andi	r24, 0x04	; 4
    33be:	90 70       	andi	r25, 0x00	; 0
    33c0:	95 95       	asr	r25
    33c2:	87 95       	ror	r24
    33c4:	95 95       	asr	r25
    33c6:	87 95       	ror	r24
    33c8:	81 70       	andi	r24, 0x01	; 1
    33ca:	81 70       	andi	r24, 0x01	; 1
    33cc:	98 2f       	mov	r25, r24
    33ce:	99 0f       	add	r25, r25
    33d0:	99 0f       	add	r25, r25
    33d2:	8c 91       	ld	r24, X
    33d4:	8b 7f       	andi	r24, 0xFB	; 251
    33d6:	89 2b       	or	r24, r25
    33d8:	8c 93       	st	X, r24


	/************************** UCSRC Description ***************************/
	/* The URSEL must be one when writing the UCSRC */
	UART_UCSRC_REG.Bits.URSEL_Bit = 1;
    33da:	e0 e4       	ldi	r30, 0x40	; 64
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	80 68       	ori	r24, 0x80	; 128
    33e2:	80 83       	st	Z, r24

	/* set the Select mode to the register whether it is synchronous or asynchronous */
	UART_UCSRC_REG.Bits.UMSEL_Bit = Config_Ptr->select_mode;
    33e4:	a0 e4       	ldi	r26, 0x40	; 64
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	eb 81       	ldd	r30, Y+3	; 0x03
    33ea:	fc 81       	ldd	r31, Y+4	; 0x04
    33ec:	87 81       	ldd	r24, Z+7	; 0x07
    33ee:	81 70       	andi	r24, 0x01	; 1
    33f0:	81 70       	andi	r24, 0x01	; 1
    33f2:	98 2f       	mov	r25, r24
    33f4:	92 95       	swap	r25
    33f6:	99 0f       	add	r25, r25
    33f8:	99 0f       	add	r25, r25
    33fa:	90 7c       	andi	r25, 0xC0	; 192
    33fc:	8c 91       	ld	r24, X
    33fe:	8f 7b       	andi	r24, 0xBF	; 191
    3400:	89 2b       	or	r24, r25
    3402:	8c 93       	st	X, r24

	/* set the Parity mode to the register*/
	UART_UCSRC_REG.Bits.UPM0_Bit = ((Config_Ptr->parity) & 0x01);
    3404:	a0 e4       	ldi	r26, 0x40	; 64
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	eb 81       	ldd	r30, Y+3	; 0x03
    340a:	fc 81       	ldd	r31, Y+4	; 0x04
    340c:	81 81       	ldd	r24, Z+1	; 0x01
    340e:	81 70       	andi	r24, 0x01	; 1
    3410:	81 70       	andi	r24, 0x01	; 1
    3412:	81 70       	andi	r24, 0x01	; 1
    3414:	81 70       	andi	r24, 0x01	; 1
    3416:	98 2f       	mov	r25, r24
    3418:	92 95       	swap	r25
    341a:	90 7f       	andi	r25, 0xF0	; 240
    341c:	8c 91       	ld	r24, X
    341e:	8f 7e       	andi	r24, 0xEF	; 239
    3420:	89 2b       	or	r24, r25
    3422:	8c 93       	st	X, r24
	UART_UCSRC_REG.Bits.UPM1_Bit = (((Config_Ptr->parity) & 0x02) >> 1);
    3424:	a0 e4       	ldi	r26, 0x40	; 64
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	eb 81       	ldd	r30, Y+3	; 0x03
    342a:	fc 81       	ldd	r31, Y+4	; 0x04
    342c:	81 81       	ldd	r24, Z+1	; 0x01
    342e:	88 2f       	mov	r24, r24
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	82 70       	andi	r24, 0x02	; 2
    3434:	90 70       	andi	r25, 0x00	; 0
    3436:	95 95       	asr	r25
    3438:	87 95       	ror	r24
    343a:	81 70       	andi	r24, 0x01	; 1
    343c:	81 70       	andi	r24, 0x01	; 1
    343e:	98 2f       	mov	r25, r24
    3440:	92 95       	swap	r25
    3442:	99 0f       	add	r25, r25
    3444:	90 7e       	andi	r25, 0xE0	; 224
    3446:	8c 91       	ld	r24, X
    3448:	8f 7d       	andi	r24, 0xDF	; 223
    344a:	89 2b       	or	r24, r25
    344c:	8c 93       	st	X, r24

	/* set the Stop Bit Select to the register*/
	UART_UCSRC_REG.Bits.USBS_Bit = Config_Ptr->stop_bit;
    344e:	a0 e4       	ldi	r26, 0x40	; 64
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	eb 81       	ldd	r30, Y+3	; 0x03
    3454:	fc 81       	ldd	r31, Y+4	; 0x04
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	81 70       	andi	r24, 0x01	; 1
    345a:	81 70       	andi	r24, 0x01	; 1
    345c:	98 2f       	mov	r25, r24
    345e:	99 0f       	add	r25, r25
    3460:	99 0f       	add	r25, r25
    3462:	99 0f       	add	r25, r25
    3464:	8c 91       	ld	r24, X
    3466:	87 7f       	andi	r24, 0xF7	; 247
    3468:	89 2b       	or	r24, r25
    346a:	8c 93       	st	X, r24

	/* Set the 2 bits of the character size into the register UCSRC [UCSZ0 UCSZ1]
	   - insert the required data bits in the second 2 bits (UCSZ1 , UCSZ0)of UCSRC Register
	 */
	UART_UCSRC_REG.Bits.USCZ0_Bit = ((Config_Ptr->bit_data) & 0x01);
    346c:	a0 e4       	ldi	r26, 0x40	; 64
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	eb 81       	ldd	r30, Y+3	; 0x03
    3472:	fc 81       	ldd	r31, Y+4	; 0x04
    3474:	80 81       	ld	r24, Z
    3476:	81 70       	andi	r24, 0x01	; 1
    3478:	81 70       	andi	r24, 0x01	; 1
    347a:	81 70       	andi	r24, 0x01	; 1
    347c:	81 70       	andi	r24, 0x01	; 1
    347e:	98 2f       	mov	r25, r24
    3480:	99 0f       	add	r25, r25
    3482:	8c 91       	ld	r24, X
    3484:	8d 7f       	andi	r24, 0xFD	; 253
    3486:	89 2b       	or	r24, r25
    3488:	8c 93       	st	X, r24
	UART_UCSRC_REG.Bits.USCZ1_Bit = (((Config_Ptr->bit_data) & 0x02) >> 1);
    348a:	a0 e4       	ldi	r26, 0x40	; 64
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	eb 81       	ldd	r30, Y+3	; 0x03
    3490:	fc 81       	ldd	r31, Y+4	; 0x04
    3492:	80 81       	ld	r24, Z
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	82 70       	andi	r24, 0x02	; 2
    349a:	90 70       	andi	r25, 0x00	; 0
    349c:	95 95       	asr	r25
    349e:	87 95       	ror	r24
    34a0:	81 70       	andi	r24, 0x01	; 1
    34a2:	81 70       	andi	r24, 0x01	; 1
    34a4:	98 2f       	mov	r25, r24
    34a6:	99 0f       	add	r25, r25
    34a8:	99 0f       	add	r25, r25
    34aa:	8c 91       	ld	r24, X
    34ac:	8b 7f       	andi	r24, 0xFB	; 251
    34ae:	89 2b       	or	r24, r25
    34b0:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
#if (UART_SPEED_MODE == ASYNCHRONOUS_DOUBLE_SPEED_MODE)
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    34b2:	eb 81       	ldd	r30, Y+3	; 0x03
    34b4:	fc 81       	ldd	r31, Y+4	; 0x04
    34b6:	83 81       	ldd	r24, Z+3	; 0x03
    34b8:	94 81       	ldd	r25, Z+4	; 0x04
    34ba:	a5 81       	ldd	r26, Z+5	; 0x05
    34bc:	b6 81       	ldd	r27, Z+6	; 0x06
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	aa 1f       	adc	r26, r26
    34c4:	bb 1f       	adc	r27, r27
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	aa 1f       	adc	r26, r26
    34cc:	bb 1f       	adc	r27, r27
    34ce:	88 0f       	add	r24, r24
    34d0:	99 1f       	adc	r25, r25
    34d2:	aa 1f       	adc	r26, r26
    34d4:	bb 1f       	adc	r27, r27
    34d6:	9c 01       	movw	r18, r24
    34d8:	ad 01       	movw	r20, r26
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	92 e1       	ldi	r25, 0x12	; 18
    34de:	aa e7       	ldi	r26, 0x7A	; 122
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 45 1b 	call	0x368a	; 0x368a <__udivmodsi4>
    34ea:	da 01       	movw	r26, r20
    34ec:	c9 01       	movw	r24, r18
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	9a 83       	std	Y+2, r25	; 0x02
    34f2:	89 83       	std	Y+1, r24	; 0x01
	/* Invalid speed setting, return */
	return;
#endif

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UART_UBRRH_REG.Byte = ubrr_value>>8;
    34f4:	e0 e4       	ldi	r30, 0x40	; 64
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	9a 81       	ldd	r25, Y+2	; 0x02
    34fc:	89 2f       	mov	r24, r25
    34fe:	99 27       	eor	r25, r25
    3500:	80 83       	st	Z, r24
	UART_UBRRL_REG.Byte = ubrr_value;
    3502:	e9 e2       	ldi	r30, 0x29	; 41
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	80 83       	st	Z, r24
}
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	0f 92       	push	r0
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UART_UCSRA_REG.Byte,UART_UCSRA_REG.Bits.UDRE_Bit)){}
    3524:	eb e2       	ldi	r30, 0x2B	; 43
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	eb e2       	ldi	r30, 0x2B	; 43
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	82 95       	swap	r24
    3536:	86 95       	lsr	r24
    3538:	87 70       	andi	r24, 0x07	; 7
    353a:	81 70       	andi	r24, 0x01	; 1
    353c:	88 2f       	mov	r24, r24
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	a9 01       	movw	r20, r18
    3542:	02 c0       	rjmp	.+4      	; 0x3548 <UART_sendByte+0x30>
    3544:	55 95       	asr	r21
    3546:	47 95       	ror	r20
    3548:	8a 95       	dec	r24
    354a:	e2 f7       	brpl	.-8      	; 0x3544 <UART_sendByte+0x2c>
    354c:	ca 01       	movw	r24, r20
    354e:	81 70       	andi	r24, 0x01	; 1
    3550:	90 70       	andi	r25, 0x00	; 0
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	39 f3       	breq	.-50     	; 0x3524 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UART_UDR_REG.TwoBytes = data;
    3556:	ec e2       	ldi	r30, 0x2C	; 44
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	88 2f       	mov	r24, r24
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3564:	0f 90       	pop	r0
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UART_UCSRA_REG.Byte,UART_UCSRA_REG.Bits.RXC_Bit)){}
    3574:	eb e2       	ldi	r30, 0x2B	; 43
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	28 2f       	mov	r18, r24
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	eb e2       	ldi	r30, 0x2B	; 43
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	88 1f       	adc	r24, r24
    3586:	88 27       	eor	r24, r24
    3588:	88 1f       	adc	r24, r24
    358a:	88 2f       	mov	r24, r24
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	a9 01       	movw	r20, r18
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <UART_recieveByte+0x2a>
    3592:	55 95       	asr	r21
    3594:	47 95       	ror	r20
    3596:	8a 95       	dec	r24
    3598:	e2 f7       	brpl	.-8      	; 0x3592 <UART_recieveByte+0x26>
    359a:	ca 01       	movw	r24, r20
    359c:	81 70       	andi	r24, 0x01	; 1
    359e:	90 70       	andi	r25, 0x00	; 0
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	41 f3       	breq	.-48     	; 0x3574 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return (uint8)UART_UDR_REG.TwoBytes;
    35a4:	ec e2       	ldi	r30, 0x2C	; 44
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <UART_sendString+0x6>
    35b8:	0f 92       	push	r0
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	9b 83       	std	Y+3, r25	; 0x03
    35c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35c2:	19 82       	std	Y+1, r1	; 0x01
    35c4:	0e c0       	rjmp	.+28     	; 0x35e2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	28 2f       	mov	r18, r24
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	8a 81       	ldd	r24, Y+2	; 0x02
    35ce:	9b 81       	ldd	r25, Y+3	; 0x03
    35d0:	fc 01       	movw	r30, r24
    35d2:	e2 0f       	add	r30, r18
    35d4:	f3 1f       	adc	r31, r19
    35d6:	80 81       	ld	r24, Z
    35d8:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_sendByte>
		i++;
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	8f 5f       	subi	r24, 0xFF	; 255
    35e0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	28 2f       	mov	r18, r24
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	9b 81       	ldd	r25, Y+3	; 0x03
    35ec:	fc 01       	movw	r30, r24
    35ee:	e2 0f       	add	r30, r18
    35f0:	f3 1f       	adc	r31, r19
    35f2:	80 81       	ld	r24, Z
    35f4:	88 23       	and	r24, r24
    35f6:	39 f7       	brne	.-50     	; 0x35c6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	cf 91       	pop	r28
    3600:	df 91       	pop	r29
    3602:	08 95       	ret

00003604 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	df 93       	push	r29
    360a:	cf 93       	push	r28
    360c:	00 d0       	rcall	.+0      	; 0x360e <UART_receiveString+0xa>
    360e:	0f 92       	push	r0
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	9b 83       	std	Y+3, r25	; 0x03
    3616:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3618:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	8c 01       	movw	r16, r24
    3626:	02 0f       	add	r16, r18
    3628:	13 1f       	adc	r17, r19
    362a:	0e 94 b6 1a 	call	0x356c	; 0x356c <UART_recieveByte>
    362e:	f8 01       	movw	r30, r16
    3630:	80 83       	st	Z, r24
    3632:	0f c0       	rjmp	.+30     	; 0x3652 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	8f 5f       	subi	r24, 0xFF	; 255
    3638:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	28 2f       	mov	r18, r24
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	8c 01       	movw	r16, r24
    3646:	02 0f       	add	r16, r18
    3648:	13 1f       	adc	r17, r19
    364a:	0e 94 b6 1a 	call	0x356c	; 0x356c <UART_recieveByte>
    364e:	f8 01       	movw	r30, r16
    3650:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	28 2f       	mov	r18, r24
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	9b 81       	ldd	r25, Y+3	; 0x03
    365c:	fc 01       	movw	r30, r24
    365e:	e2 0f       	add	r30, r18
    3660:	f3 1f       	adc	r31, r19
    3662:	80 81       	ld	r24, Z
    3664:	83 32       	cpi	r24, 0x23	; 35
    3666:	31 f7       	brne	.-52     	; 0x3634 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	8a 81       	ldd	r24, Y+2	; 0x02
    3670:	9b 81       	ldd	r25, Y+3	; 0x03
    3672:	fc 01       	movw	r30, r24
    3674:	e2 0f       	add	r30, r18
    3676:	f3 1f       	adc	r31, r19
    3678:	10 82       	st	Z, r1

}
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	1f 91       	pop	r17
    3686:	0f 91       	pop	r16
    3688:	08 95       	ret

0000368a <__udivmodsi4>:
    368a:	a1 e2       	ldi	r26, 0x21	; 33
    368c:	1a 2e       	mov	r1, r26
    368e:	aa 1b       	sub	r26, r26
    3690:	bb 1b       	sub	r27, r27
    3692:	fd 01       	movw	r30, r26
    3694:	0d c0       	rjmp	.+26     	; 0x36b0 <__udivmodsi4_ep>

00003696 <__udivmodsi4_loop>:
    3696:	aa 1f       	adc	r26, r26
    3698:	bb 1f       	adc	r27, r27
    369a:	ee 1f       	adc	r30, r30
    369c:	ff 1f       	adc	r31, r31
    369e:	a2 17       	cp	r26, r18
    36a0:	b3 07       	cpc	r27, r19
    36a2:	e4 07       	cpc	r30, r20
    36a4:	f5 07       	cpc	r31, r21
    36a6:	20 f0       	brcs	.+8      	; 0x36b0 <__udivmodsi4_ep>
    36a8:	a2 1b       	sub	r26, r18
    36aa:	b3 0b       	sbc	r27, r19
    36ac:	e4 0b       	sbc	r30, r20
    36ae:	f5 0b       	sbc	r31, r21

000036b0 <__udivmodsi4_ep>:
    36b0:	66 1f       	adc	r22, r22
    36b2:	77 1f       	adc	r23, r23
    36b4:	88 1f       	adc	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	1a 94       	dec	r1
    36ba:	69 f7       	brne	.-38     	; 0x3696 <__udivmodsi4_loop>
    36bc:	60 95       	com	r22
    36be:	70 95       	com	r23
    36c0:	80 95       	com	r24
    36c2:	90 95       	com	r25
    36c4:	9b 01       	movw	r18, r22
    36c6:	ac 01       	movw	r20, r24
    36c8:	bd 01       	movw	r22, r26
    36ca:	cf 01       	movw	r24, r30
    36cc:	08 95       	ret

000036ce <__prologue_saves__>:
    36ce:	2f 92       	push	r2
    36d0:	3f 92       	push	r3
    36d2:	4f 92       	push	r4
    36d4:	5f 92       	push	r5
    36d6:	6f 92       	push	r6
    36d8:	7f 92       	push	r7
    36da:	8f 92       	push	r8
    36dc:	9f 92       	push	r9
    36de:	af 92       	push	r10
    36e0:	bf 92       	push	r11
    36e2:	cf 92       	push	r12
    36e4:	df 92       	push	r13
    36e6:	ef 92       	push	r14
    36e8:	ff 92       	push	r15
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	ca 1b       	sub	r28, r26
    36f8:	db 0b       	sbc	r29, r27
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	cd bf       	out	0x3d, r28	; 61
    3704:	09 94       	ijmp

00003706 <__epilogue_restores__>:
    3706:	2a 88       	ldd	r2, Y+18	; 0x12
    3708:	39 88       	ldd	r3, Y+17	; 0x11
    370a:	48 88       	ldd	r4, Y+16	; 0x10
    370c:	5f 84       	ldd	r5, Y+15	; 0x0f
    370e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3710:	7d 84       	ldd	r7, Y+13	; 0x0d
    3712:	8c 84       	ldd	r8, Y+12	; 0x0c
    3714:	9b 84       	ldd	r9, Y+11	; 0x0b
    3716:	aa 84       	ldd	r10, Y+10	; 0x0a
    3718:	b9 84       	ldd	r11, Y+9	; 0x09
    371a:	c8 84       	ldd	r12, Y+8	; 0x08
    371c:	df 80       	ldd	r13, Y+7	; 0x07
    371e:	ee 80       	ldd	r14, Y+6	; 0x06
    3720:	fd 80       	ldd	r15, Y+5	; 0x05
    3722:	0c 81       	ldd	r16, Y+4	; 0x04
    3724:	1b 81       	ldd	r17, Y+3	; 0x03
    3726:	aa 81       	ldd	r26, Y+2	; 0x02
    3728:	b9 81       	ldd	r27, Y+1	; 0x01
    372a:	ce 0f       	add	r28, r30
    372c:	d1 1d       	adc	r29, r1
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	f8 94       	cli
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	cd bf       	out	0x3d, r28	; 61
    3738:	ed 01       	movw	r28, r26
    373a:	08 95       	ret

0000373c <itoa>:
    373c:	fb 01       	movw	r30, r22
    373e:	9f 01       	movw	r18, r30
    3740:	e8 94       	clt
    3742:	42 30       	cpi	r20, 0x02	; 2
    3744:	c4 f0       	brlt	.+48     	; 0x3776 <itoa+0x3a>
    3746:	45 32       	cpi	r20, 0x25	; 37
    3748:	b4 f4       	brge	.+44     	; 0x3776 <itoa+0x3a>
    374a:	4a 30       	cpi	r20, 0x0A	; 10
    374c:	29 f4       	brne	.+10     	; 0x3758 <itoa+0x1c>
    374e:	97 fb       	bst	r25, 7
    3750:	1e f4       	brtc	.+6      	; 0x3758 <itoa+0x1c>
    3752:	90 95       	com	r25
    3754:	81 95       	neg	r24
    3756:	9f 4f       	sbci	r25, 0xFF	; 255
    3758:	64 2f       	mov	r22, r20
    375a:	77 27       	eor	r23, r23
    375c:	0e 94 cf 1b 	call	0x379e	; 0x379e <__udivmodhi4>
    3760:	80 5d       	subi	r24, 0xD0	; 208
    3762:	8a 33       	cpi	r24, 0x3A	; 58
    3764:	0c f0       	brlt	.+2      	; 0x3768 <itoa+0x2c>
    3766:	89 5d       	subi	r24, 0xD9	; 217
    3768:	81 93       	st	Z+, r24
    376a:	cb 01       	movw	r24, r22
    376c:	00 97       	sbiw	r24, 0x00	; 0
    376e:	a1 f7       	brne	.-24     	; 0x3758 <itoa+0x1c>
    3770:	16 f4       	brtc	.+4      	; 0x3776 <itoa+0x3a>
    3772:	5d e2       	ldi	r21, 0x2D	; 45
    3774:	51 93       	st	Z+, r21
    3776:	10 82       	st	Z, r1
    3778:	c9 01       	movw	r24, r18
    377a:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <strrev>

0000377e <strrev>:
    377e:	dc 01       	movw	r26, r24
    3780:	fc 01       	movw	r30, r24
    3782:	67 2f       	mov	r22, r23
    3784:	71 91       	ld	r23, Z+
    3786:	77 23       	and	r23, r23
    3788:	e1 f7       	brne	.-8      	; 0x3782 <strrev+0x4>
    378a:	32 97       	sbiw	r30, 0x02	; 2
    378c:	04 c0       	rjmp	.+8      	; 0x3796 <strrev+0x18>
    378e:	7c 91       	ld	r23, X
    3790:	6d 93       	st	X+, r22
    3792:	70 83       	st	Z, r23
    3794:	62 91       	ld	r22, -Z
    3796:	ae 17       	cp	r26, r30
    3798:	bf 07       	cpc	r27, r31
    379a:	c8 f3       	brcs	.-14     	; 0x378e <strrev+0x10>
    379c:	08 95       	ret

0000379e <__udivmodhi4>:
    379e:	aa 1b       	sub	r26, r26
    37a0:	bb 1b       	sub	r27, r27
    37a2:	51 e1       	ldi	r21, 0x11	; 17
    37a4:	07 c0       	rjmp	.+14     	; 0x37b4 <__udivmodhi4_ep>

000037a6 <__udivmodhi4_loop>:
    37a6:	aa 1f       	adc	r26, r26
    37a8:	bb 1f       	adc	r27, r27
    37aa:	a6 17       	cp	r26, r22
    37ac:	b7 07       	cpc	r27, r23
    37ae:	10 f0       	brcs	.+4      	; 0x37b4 <__udivmodhi4_ep>
    37b0:	a6 1b       	sub	r26, r22
    37b2:	b7 0b       	sbc	r27, r23

000037b4 <__udivmodhi4_ep>:
    37b4:	88 1f       	adc	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	5a 95       	dec	r21
    37ba:	a9 f7       	brne	.-22     	; 0x37a6 <__udivmodhi4_loop>
    37bc:	80 95       	com	r24
    37be:	90 95       	com	r25
    37c0:	bc 01       	movw	r22, r24
    37c2:	cd 01       	movw	r24, r26
    37c4:	08 95       	ret

000037c6 <_exit>:
    37c6:	f8 94       	cli

000037c8 <__stop_program>:
    37c8:	ff cf       	rjmp	.-2      	; 0x37c8 <__stop_program>
